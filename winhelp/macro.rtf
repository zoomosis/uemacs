{\rtf1\ansi \deff0{\fonttbl{\f0\froman Tms Rmn;}{\f1\froman Symbol;}{\f2\fswiss Helv;}{\f3\froman Times New Roman;}{\f4\fswiss Arial;}{\f5\froman Roman PS;}{\f6\fswiss Sans Serif PS;}{\f7\fmodern Sans Serif 10cpi;}{\f8\fmodern Courier;}
{\f9\fmodern Sans Serif 12cpi;}{\f10\fmodern Roman 12cpi;}{\f11\fmodern Roman 17cpi;}{\f12\fmodern Sans Serif 17cpi;}{\f13\fnil Preview;}{\f14\fswiss DIGITAL;}{\f15\fmodern Terminal;}{\f16\froman Roman;}{\f17\fscript Script;}{\f18\fmodern Modern;}
{\f19\fnil 8514oem;}{\f20\fnil 8514fix;}{\f21\fswiss System;}{\f22\fmodern Sans Serif 6cpi;}{\f23\fmodern Sans Serif 5cpi;}{\f24\fmodern Roman 6cpi;}{\f25\fmodern Roman 5cpi;}{\f26\fmodern Roman 10cpi;}{\f27\fmodern Courier New;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;}{\stylesheet{\s244 \f4\fs16\up6 
\sbasedon0\snext0 footnote reference;}{\s245 \f4\fs20 \sbasedon0\snext245 footnote text;}{\s246\li720 \i\f4\fs20 \sbasedon0\snext255 heading 9;}{\s247\li720 \i\f4\fs20 \sbasedon0\snext255 heading 8;}{\s248\li720 \i\f4\fs20 \sbasedon0\snext255 heading 7;}{
\s249\li720 \f4\fs20\ul \sbasedon0\snext255 heading 6;}{\s250\li720 \b\f4\fs20 \sbasedon0\snext255 heading 5;}{\s251\sa120\tx2880 \b\f4\fs20 \sbasedon0\snext255 heading 4;}{\s252\sa120\tx2880 \b\f4 \sbasedon0\snext255 heading 3;}{\s253\sa240\tx2880 
\b\f4\cf2 \sbasedon0\snext0 heading 2;}{\s254\qc\sa240 \b\f4\fs30\cf2 \sbasedon0\snext0 heading 1;}{\s255\li720 \f4\fs20 \sbasedon0\snext255 Normal Indent;}{\f4\fs20 \snext0 Normal;}{\s2\fi-2520\li2880\sa120\tx2880 \f4\fs20 \sbasedon0\snext2 Func List;}{
\s3\fi-2880\li2880\sa120\tqr\tx720\tx900\tx2880 \f4\fs20 \sbasedon2\snext3 Binding;}{\s4\fi-2160\li2880\sa120\tx2880 \f27\fs18 \sbasedon0\snext4 Example;}{\s5\sa240\tx2880 \f4\fs20\cf2 \sbasedon0\snext5 Title;}{\s6\sa120 \f4\fs20 
\sbasedon0\snext6 Main Text;}{\s7\fi-1080\li1440\sa120\tx1440\tx2880 \f4\fs20 \sbasedon2\snext7 Char List;}{\s8\fi-360\li360\sa120\tx360\tx1440\tx2880\tx3600\tx4320 \f4\fs20 \sbasedon0\snext8 Steps;}{\s9\sa120\tx180\tx1980\tx3780\tx5580\tx8550 \f4\fs20 
\sbasedon6\snext9 Glossary;}{\s10\fi-2520\li2880\sa120\sl120\tx2880 \f4\fs20 \sbasedon2\snext10 interline;}{\s11\li360\sa120\tx2880 \f4\fs20 \sbasedon6\snext11 Jump List;}{\s12\fi-720\li720\sa120 \f4\fs20 \sbasedon6\snext12 Note;}{
\s13\fi-2880\li2880\sa120\tx900\tx2880 \f4\fs20 \sbasedon3\snext13 FunctionDesc;}{\s14\fi-900\li900\sa120\tqr\tx720\tx900 \f4\fs20 \sbasedon3\snext14 BindingShort;}{\s15\fi-1440\li1800\tx1800 \f4\fs20 \sbasedon7\snext15 Var List;}}{\info
{\title macro language topic file}{\subject MicroEMACS help}{\author Pierre Perret}{\doccomm contains Commands, Variables, Directives and Functions}{\operator Pierre & Beatrice Perret}{\creatim\yr1991\mo12\dy9\hr21\min15}
{\revtim\yr1992\mo10\dy11\hr21\min36}{\version172}{\edmins6323}{\nofpages0}{\nofwords65537}{\nofchars65536}{\vern8368}}\widowctrl\ftnbj\hyphhotz0 \sectd \linex0\endnhere \pard\plain \s254\qc\sa240 \b\f4\fs30\cf2 {\plain \f4\fs16\up6 ${\footnote 
\pard\plain \s245 \f4\fs20 {\fs16\up6 $} Macro Language}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} MacroLanguage}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Index:2040}} {\plain 
\f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} macro;language}} Macro Language
\par \pard\plain \f4\fs20 The MicroEMACS {\ul macro}{\v Macro} language allows you to add extensions to the editor. Statements (one per line) are composed of the following elements:
\par \pard\plain \s2\fi-1800\li2160\tx2160 \f4\fs20 {\uldb Commands}{\v Commands}\tab manipulate text, buffers, windows, etc... within the editor
\par {\uldb Directives}{\v Directives}\tab control the flow of execution within a macro
\par {\uldb Arguments}{\v Arguments}:
\par \pard \s2\fi-1440\li2160\tx2160 {\uldb Constants}{\v Constants}
\par {\uldb Variables}{\v Variables}
\par {\uldb Functions}{\v Functions}
\par \pard \s2\fi-1800\li2160\sa120\tx2160 {\uldb Comments}{\v Comments}
\par \pard\plain \s6\sa120 \f4\fs20 Macros are registered with MicroEMACS by the {\uldb store-macro}{\v store_macro} or {\uldb store-procedure}{\v store_procedure} commands. They get executed through menus or keystrokes they have been {\ul bound}{\v Binding}
 to, or through the {\uldb execute-macro-}{\i\uldb n}{\i\v execute_macro_n} or {\uldb run}{\v run} commands.
\par Macros can also be executed directly from a {\ul buffer}{\v Buffer} or a file by the {\uldb execute-buffer}{\v execute_buffer} or {\uldb execute-file}{\v execute_file} commands.
\par \pard\plain \s253\sa240\tx2880 \b\f4\cf2 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Commands}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} Commands}} 
{\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} MacroLanguage:010}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} commands}} Commands
\par \pard\plain \s6\sa120 \f4\fs20 {\b By topic:}
\par \pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb Binding}{\v BindingCommands}
\par {\uldb Block of Text}{\v BlockOfTextCommands}
\par {\uldb Buffer, Window and Screen}{\v BufferWindowScreenCommands}
\par {\uldb Clipboard and Kill Buffer}{\v ClipboardKillBufferCommands}
\par {\uldb Execution, Macro and Variable}{\v ExecutionMacroVariableCommands}
\par {\uldb File}{\v FileCommands}
\par {\uldb Mouse}{\v MouseCommands}
\par {\uldb Positioning}{\v PositioningCommands}
\par \pard \s11\li360\sa120\tx2880 {\uldb Search and Replace}{\v SearchReplaceCommands}
\par {\uldb Miscellaneous}{\v MiscellaneousCommands}
\par \pard\plain \s6\sa120 \f4\fs20 {\b Alphabetical lists:
\par }\pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb Standard commands}{\v StandardCommands}
\par \pard \s11\li360\sa120\tx2880 {\uldb Additional commands}{\v AdditionalCommands}
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Binding commands}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 BindingCommands}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} CommandsByTopic:bindingcommands}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} binding;commands}} Binding commands
\par \pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb apropos}{\v apropos}
\par {\uldb bind-to-key}{\v bind_to_key}
\par {\uldb bind-to-menu}{\v bind_to_menu}
\par {\uldb ctlx-prefix}{\v ctlx_prefix}
\par {\uldb describe-bindings}{\v describe_bindings}
\par {\uldb describe-key}{\v describe_key}
\par {\uldb macro-to-key}{\v macro_to_key}
\par {\uldb macro-to-menu}{\v macro_to_menu}
\par {\uldb meta-prefix}{\v meta_prefix}
\par {\uldb unbind-key}{\v unbind_key}
\par \pard \s11\li360\sa120\tx2880 {\uldb unbind-menu}{\v unbind_menu}
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Block of Text commands}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 BlockOfTextCommands}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} CommandsByTopic:blockoftextcommands}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} region;line;word;paragraph;commands}}
 Block of Text commands
\par \pard\plain \s6\sa120 \f4\fs20 Commands that affect regions, lines, words and paragraphs.
\par \pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb case-region-lower}{\v case_region_lower}
\par {\uldb case-region-upper}{\v case_region_upper}
\par {\uldb case-word-capitalize}{\v case_word_capitalize}
\par {\uldb case-word-lower}{\v case_word_lower}
\par {\uldb case-word-upper}{\v case_word_upper}
\par {\uldb copy-region}{\v copy_region}
\par {\uldb count-words}{\v count_words}
\par {\uldb delete-blank-lines}{\v delete_blank_lines}
\par {\uldb delete-next-word}{\v delete_next_word}
\par {\uldb delete-previous-word}{\v delete_previous_word}
\par {\uldb detab-region}{\v detab_region}
\par {\uldb entab-region}{\v entab_region}
\par {\uldb fill-paragraph}{\v fill_paragraph}
\par {\uldb indent-region}{\v indent_region}
\par {\uldb kill-paragraph}{\v kill_paragraph}
\par {\uldb kill-region}{\v kill_region}
\par {\uldb kill-to-end-of-line}{\v kill_to_end_of_line}
\par {\uldb narrow-to-region}{\v narrow_to_region}
\par {\uldb remove-mark}{\v remove_mark}
\par {\uldb set-mark}{\v set_mark}
\par {\uldb trim-region}{\v trim_region}
\par {\uldb undent-region}{\v undent_region}
\par {\uldb widen-from-region}{\v widen_from_region}
\par \pard \s11\li360\sa120\tx2880 {\uldb wrap-word}{\v wrap_word}
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Buffer, Window and Screen commands}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {
\fs16\up6 #} BufferWindowScreenCommands}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} CommandsByTopic:bufferwindowscreencommands}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K}
 buffer;window;screen;commands}} Buffer, Window and Screen commands
\par \pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb add-global-mode}{\v add_global_mode}
\par {\uldb add-mode}{\v add_mode}
\par {\uldb cascade-screens}{\v cascade_screens}
\par {\uldb change-screen-column}{\v change_screen_column}
\par {\uldb change-screen-row}{\v change_screen_row}
\par {\uldb change-screen-size}{\v change_screen_size}
\par {\uldb change-screen-width}{\v change_screen_width}
\par {\uldb clear-and-redraw}{\v clear_and_redraw}
\par {\uldb cycle-screens}{\v cycle_screens}
\par {\uldb delete-buffer}{\v delete_buffer}
\par {\uldb delete-global-mode}{\v delete_global_mode}
\par {\uldb delete-other-windows}{\v delete_other_windows}
\par {\uldb delete-mode}{\v delete_mode}
\par {\uldb delete-screen}{\v delete_screen}
\par {\uldb delete-window}{\v delete_window}
\par {\uldb execute-buffer}{\v execute_buffer}
\par {\uldb filter-buffer}{\v filter_buffer}
\par {\uldb find-screen}{\v find_screen}
\par {\uldb grow-window}{\v grow_window}
\par {\uldb list-buffers}{\v list_buffers}
\par {\uldb list-screens}{\v list_screens}
\par {\uldb maximize-screen}{\v maximize_screen}
\par {\uldb minimize-screen}{\v minimize_screen}
\par {\uldb move-window-down}{\v move_window_down}
\par {\uldb move-window-up}{\v move_window_up}
\par {\uldb name-buffer}{\v name_buffer}
\par {\uldb narrow-to-region}{\v narrow_to_region}
\par {\uldb next-buffer}{\v next_buffer}
\par {\uldb next-window}{\v next_window}
\par {\uldb pipe-command}{\v pipe_command}
\par {\uldb pop-buffer}{\v pop_buffer}
\par {\uldb previous-window}{\v previous_window}
\par {\uldb rename-screen}{\v rename_screen}
\par {\uldb resize-window}{\v resize_window}
\par {\uldb restore-screen}{\v restore_screen}
\par {\uldb restore-window}{\v restore_window}
\par {\uldb save-window}{\v save_window}
\par {\uldb scroll-next-up}{\v scroll_next_up}
\par {\uldb scroll-next-down}{\v scroll_next_down}
\par {\uldb select-buffer}{\v select_buffer}
\par {\uldb shrink-window}{\v shrink_window}
\par {\uldb split-current-window}{\v split_current_window}
\par {\uldb tile-screens}{\v tile_screens}
\par {\uldb unmark-buffer}{\v unmark_buffer}
\par {\uldb update-screen}{\v update_screen}
\par \pard \s11\li360\sa120\tx2880 {\uldb widen-from-region}{\v widen_from_region}
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Clipboard and Kill Buffer commands}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {
\fs16\up6 #} ClipboardKillBufferCommands}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} CommandsByTopic:clipboardandkillbuffercommands}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K}
 clipboard;kill;commands}} Clipboard and Kill Buffer commands
\par \pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb clip-region}{\v clip_region}
\par {\uldb copy-region}{\v copy_region}
\par {\uldb cut-region}{\v cut_region}
\par {\uldb cycle-ring}{\v cycle_ring}
\par {\uldb delete-kill-ring}{\v delete_kill_ring}
\par {\uldb delete-next-character}{\v delete_next_character}\tab (with {\ul argument}{\v Argument})
\par {\uldb delete-next-word}{\v delete_next_word}
\par {\uldb delete-previous-character}{\v delete_previous_character}\tab (with {\ul argument}{\v Argument})
\par {\uldb delete-previous-word}{\v delete_previous_word}
\par {\uldb insert-clip}{\v insert_clip}
\par {\uldb kill-paragraph}{\v kill_paragraph}
\par {\uldb kill-region}{\v kill_region}
\par {\uldb kill-to-end-of-line}{\v kill_to_end_of_line}
\par {\uldb yank}{\v yank}
\par {\uldb yank-pop}{\v yank_pop}
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Execution, Macro and Variable commands}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {
\fs16\up6 #} ExecutionMacroVariableCommands}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} CommandsByTopic:executionmacrovariablecommands}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K}
 execute;spawn;filter;pipe;shell;DOS;macro;variable;commands}} Execution, Macro and Variable commands
\par \pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb abort-command}{\v abort_command}
\par {\uldb begin-macro}{\v begin_macro}
\par {\uldb describe-functions}{\v describe_functions}
\par {\uldb describe-variables}{\v describe_variables}
\par {\uldb display}{\v display}
\par {\uldb end-macro}{\v end_macro}
\par {\uldb execute-buffer}{\v execute_buffer}
\par {\uldb execute-command-line}{\v execute_command_line}
\par {\uldb execute-file}{\v execute_file}
\par {\uldb execute-macro}{\v execute_macro}
\par {\uldb execute-macro-}{\i\uldb n}{\i\v execute_macro_n}{\i  }
\par {\uldb execute-named-command}{\v execute_named_command}
\par {\uldb execute-procedure}{\v execute_procedure}
\par {\uldb execute-program}{\v execute_program}
\par {\uldb filter-buffer}{\v filter_buffer}
\par {\uldb i-shell}{\v i_shell}
\par {\uldb nop}{\v nop}
\par {\uldb pipe-command}{\v pipe_command}
\par {\uldb run}{\v run}
\par {\uldb set}{\v set}
\par {\uldb shell-command}{\v shell_command}
\par {\uldb source}{\v execute_file}
\par {\uldb store-macro}{\v store_macro}
\par {\uldb store-procedure}{\v store_procedure}
\par \pard \s11\li360\sa120\tx2880 {\uldb help-engine}{\v help_engine}
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} File Commands}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} FileCommands
}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} CommandsByTopic:filecommands}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} file;commands}} File Commands
\par \pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb append-file}{\v append_file}
\par {\uldb change-file-name}{\v change_file_name}
\par {\uldb execute-file}{\v execute_file}
\par {\uldb find-file}{\v find_file}
\par {\uldb insert-file}{\v insert_file}
\par {\uldb read-file}{\v read_file}
\par {\uldb save-file}{\v save_file}
\par {\uldb show-files}{\v show_files}
\par {\uldb source}{\v execute_file}
\par {\uldb view-file}{\v view_file}
\par \pard \s11\li360\sa120\tx2880 {\uldb write-file}{\v write_file}
\par \pard\plain \s252\sa120\tx2880 \b\f4 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} {\fs16 Mouse commands}}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} {\fs16 MouseCommands}}} {\plain 
\f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} CommandsByTopic:{\fs16 mousecommands}}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} mouse;commands}} Mouse commands
\par \pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb mouse-move}{\v mouse_move}
\par {\uldb mouse-move-down}{\v mouse_move_down}
\par {\uldb mouse-move-up}{\v mouse_move_up}
\par {\uldb mouse-region-down}{\v mouse_region_down}
\par {\uldb mouse-region-up}{\v mouse_region_up}
\par \pard \s11\li360\sa120\tx2880 {\uldb mouse-resize-screen}{\v mouse_resize_screen}
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Positioning commands}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 PositioningCommands}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} CommandsByTopic:positioningcommands}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} position;point;commands}} Positioning commands

\par \pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb backward-character}{\v backward_character}
\par {\uldb beginning-of-file}{\v beginning_of_file}
\par {\uldb beginning-of-line}{\v beginning_of_line}
\par {\uldb buffer-position}{\v buffer_position}
\par {\uldb end-of-file}{\v end_of_file}
\par {\uldb end-of-line}{\v end_of_line}
\par {\uldb end-of-word}{\v end_of_word}
\par {\uldb exchange-point-and-mark}{\v exchange_point_and_mark}
\par {\uldb forward-character}{\v forward_character}
\par {\uldb goto-line}{\v goto_line}
\par {\uldb goto-mark}{\v goto_mark}
\par {\uldb goto-matching-fence}{\v goto_matching_fence}
\par {\uldb next-line}{\v next_line}
\par {\uldb next-page}{\v next_page}
\par {\uldb next-paragraph}{\v next_paragraph}
\par {\uldb next-word}{\v next_word}
\par {\uldb previous-line}{\v previous_line}
\par {\uldb previous-page}{\v previous_page}
\par {\uldb previous-paragraph}{\v previous_paragraph}
\par {\uldb previous-word}{\v previous_word}
\par \pard \s11\li360\sa120\tx2880 {\uldb redraw-display}{\v redraw_display}
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Search and Replace commands}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #
} SearchReplaceCommands}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} CommandsByTopic:searchreplacecommands}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} search;replace;commands}}
 Search and Replace commands
\par \pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb hunt-backward}{\v hunt_backward}
\par {\uldb hunt-forward}{\v hunt_forward}
\par {\uldb incremental-search}{\v incremental_search}
\par {\uldb query-replace-string}{\v query_replace_string}
\par {\uldb replace-string}{\v replace_string}
\par {\uldb reverse-incremental-search}{\v reverse_incremental_search}
\par {\uldb search-forward}{\v search_forward}
\par \pard \s11\li360\sa120\tx2880 {\uldb search-reverse}{\v search_reverse}
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Miscellaneous commands}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 MiscellaneousCommands}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} CommandsByTopic:zzz010}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} misc;commands}} Miscellaneous Commands
\par \pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb clear-message-line}{\v clear_message_line}
\par {\uldb exit-emacs}{\v exit_emacs}
\par {\uldb handle-tab}{\v handle_tab}
\par {\uldb help}{\v help}
\par {\uldb insert-space}{\v insert_space}
\par {\uldb insert-string}{\v insert_string}
\par {\uldb newline}{\v newline}
\par {\uldb newline-and-indent}{\v newline_and_indent}
\par {\uldb nop}{\v nop}
\par {\uldb open-line}{\v open_line}
\par {\uldb overwrite-string}{\v overwrite_string}
\par {\uldb print}{\v print}
\par {\uldb quick-exit}{\v quick_exit}
\par {\uldb quote-character}{\v quote_character}
\par {\uldb redraw-display}{\v redraw_display}
\par {\uldb set-encryption-key}{\v set_encryption_key}
\par {\uldb transpose-characters}{\v transpose_characters}
\par {\uldb universal-argument}{\v universal_argument}
\par \pard \s11\li360\sa120\tx2880 {\uldb write-message}{\v write_message}
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Standard commands}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 StandardCommands}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} CommandsByTopic:zzz900}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} standard;commands}} Standard commands
\par \pard\plain \s6\sa120 \f4\fs20 The following commands are available in all implementations of MicroEMACS:
\par \pard\plain \s2\fi-2520\li2880\sa120\tx2880 \f4\fs20 {\uldb abort-command}{\v abort_command}\tab Allows the user to abort out of any command that is waiting for input
\par {\uldb add-global-mode}{\v add_global_mode}\tab Add a global mode for all new {\ul buffers}{\v Buffer}
\par {\uldb add-mode}{\v add_mode}\tab Add a mode to the current {\ul buffer}{\v Buffer}
\par {\uldb append-file}{\v append_file}\tab Append a {\ul buffer}{\v Buffer} to the end of a file
\par {\uldb apropos}{\v apropos}\tab Lists {\ul commands}{\v Command} and {\ul macros}{\v Macro} whose name contains the string specified
\par {\uldb backward-character}{\v backward_character}\tab Move one character to the left
\par {\uldb begin-macro}{\v begin_macro}\tab Begin recording a {\ul keyboard macro}{\v KeyboardMacro}
\par {\uldb beginning-of-file}{\v beginning_of_file}\tab Move to the beginning of the file in the current {\ul buffer}{\v Buffer}
\par {\uldb beginning-of-line}{\v beginning_of_line}\tab Move to the beginning of the current line
\par {\uldb bind-to-key}{\v bind_to_key}\tab {\ul Bind}{\v Binding} a key to a {\ul command}{\v Command}
\par {\uldb buffer-position}{\v buffer_position}\tab List the position of the {\ul point}{\v Point} on the {\ul message line}{\v MessageLine}
\par {\uldb case-region-lower}{\v case_region_lower}\tab Make a {\ul region}{\v Region} all lower case
\par {\uldb case-region-upper}{\v case_region_upper}\tab Make a {\ul region}{\v Region} all upper case
\par {\uldb case-word-capitalize}{\v case_word_capitalize}\tab Capitalize the following word
\par {\uldb case-word-lower}{\v case_word_lower}\tab Lower case the following word
\par {\uldb case-word-upper}{\v case_word_upper}\tab Upper case the following word
\par {\uldb change-file-name}{\v change_file_name}\tab Change the name of the file in the current {\ul buffer}{\v Buffer}
\par {\uldb change-screen-column}{\v change_screen_column}\tab change the column offset of the current {\ul screen}{\v Screen}
\par {\uldb change-screen-row}{\v change_screen_row}\tab change the row offset of the current {\ul screen}{\v Screen}
\par {\uldb change-screen-size}{\v change_screen_size}\tab Change the number of lines of the current {\ul screen}{\v Screen}
\par {\uldb change-screen-width}{\v change_screen_width}\tab Change the number of columns of the current {\ul screen}{\v Screen}
\par {\uldb clear-and-redraw}{\v clear_and_redraw}\tab Repaint all {\ul screens}{\v Screen} or center the {\ul point}{\v Point} in the current {\ul window}{\v Window}
\par {\uldb clear-message-line}{\v clear_message_line}\tab Clear the {\ul message line}{\v MessageLine}
\par {\uldb copy-region}{\v copy_region}\tab Copy the current {\ul region}{\v Region} into the {\ul kill buffer}{\v KillBuffer}
\par {\uldb count-words}{\v count_words}\tab Count how many words, lines and characters are in the current {\ul region}{\v Region}
\par {\uldb ctlx-prefix}{\v ctlx_prefix}\tab {\ul Bound}{\v Binding} to the key used as the {\ul ^X}{\v Keystroke} prefix
\par {\uldb cycle-ring}{\v cycle_ring}\tab moves the current position of the {\ul kill buffer}{\v KillBuffer} within the {\ul kill ring}{\v KillRing}
\par {\uldb cycle-screens}{\v cycle_screens}\tab Bring the rearmost {\ul screen}{\v Screen} to front
\par {\uldb delete-blank-lines}{\v delete_blank_lines}\tab Delete all blank lines around the {\ul point}{\v Point}
\par {\uldb delete-buffer}{\v delete_buffer}\tab Delete a {\ul buffer}{\v Buffer} which is not being currently displayed in a {\ul window}{\v Window}
\par {\uldb delete-kill-ring}{\v delete_kill_ring}\tab Reclaim the memory used by the {\ul kill ring}{\v KillRing}
\par {\uldb delete-global-mode}{\v delete_global_mode}\tab Turn off a global mode
\par {\uldb delete-mode}{\v delete_mode}\tab Turn off a mode in the current {\ul buffer}{\v Buffer}
\par {\uldb delete-next-character}{\v delete_next_character}\tab Delete the character following the {\ul point}{\v Point}
\par {\uldb delete-next-word}{\v delete_next_word}\tab Delete the word following the {\ul point}{\v Point}
\par {\uldb delete-other-windows}{\v delete_other_windows}\tab Make the current {\ul window}{\v Window} cover the entire {\ul screen}{\v Screen}
\par {\uldb delete-previous-character}{\v delete_previous_character}\tab Delete the character to the left of the {\ul point}{\v Point}
\par {\uldb delete-previous-word}{\v delete_previous_word}\tab Delete the word to the left of the {\ul point}{\v Point}
\par {\uldb delete-screen}{\v delete_screen}\tab Delete a {\ul screen}{\v Screen} (not the top one)
\par {\uldb delete-window}{\v delete_window}\tab Remove the current {\ul window}{\v Window} from the {\ul screen}{\v Screen}
\par {\uldb describe-bindings}{\v describe_bindings}\tab List all {\ul commands}{\v Command} and {\ul macros}{\v Macro}
\par {\uldb describe-functions}{\v describe_functions}\tab List all {\ul functions}{\v Function}
\par {\uldb describe-variables}{\v describe_variables}\tab List all {\ul variables}{\v Variable}
\par {\uldb describe-key}{\v describe_key}\tab Describe what {\ul command}{\v Command} or {\ul macro}{\v Macro} is {\ul bound}{\v Binding} to a {\ul keystroke}{\v Keystroke} sequence
\par {\uldb detab-region}{\v detab_region}\tab Change all tabs in a {\ul region}{\v Region} to the equivalent spaces
\par {\uldb display}{\v display}\tab Displays a {\ul variable}{\v Variable}'s current value
\par {\uldb end-macro}{\v end_macro}\tab Stop recording a {\ul keyboard macro}{\v KeyboardMacro}
\par {\uldb end-of-file}{\v end_of_file}\tab Move to the end of the current {\ul buffer}{\v Buffer}
\par {\uldb end-of-line}{\v end_of_line}\tab Move to the end of the current line
\par {\uldb end-of-word}{\v end_of_word}\tab Move just past the end of the current word
\par {\uldb entab-region}{\v entab_region}\tab Change multiple spaces to tabs where possible
\par {\uldb exchange-point-and-mark}{\v exchange_point_and_mark}\tab Move the {\ul point}{\v Point} to the last {\ul marked}{\v Mark} spot, make the original position be marked
\par {\uldb execute-buffer}{\v execute_buffer}\tab Execute a {\ul buffer}{\v Buffer} as a {\ul macro}{\v Macro}
\par {\uldb execute-command-line}{\v execute_command_line}\tab Execute a line typed on the {\ul command line}{\v CommandLine} as a {\ul macro}{\v Macro}
\par {\uldb execute-file}{\v execute_file}\tab Execute a file as a {\ul macro}{\v Macro}
\par {\uldb execute-macro}{\v execute_macro}\tab Execute the {\ul keyboard macro}{\v KeyboardMacro} (play back the recorded keystrokes)
\par {\uldb execute-macro-}{\i\uldb n}{\i\v execute_macro_n}\tab Execute numbered {\ul macro}{\v Macro} {\i n} where {\i n} is an integer from 1 to 40
\par {\uldb execute-named-command}{\v execute_named_command}\tab Execute a {\ul command}{\v Command} by name
\par {\uldb execute-procedure}{\v execute_procedure}\tab Execute a {\ul procedure}{\v Macro} by name
\par {\uldb execute-program}{\v execute_program}\tab Execute a program directly (not through an intervening shell)
\par {\uldb exit-emacs}{\v exit_emacs}\tab Exit MicroEMACS. If there are unwritten, changed {\ul buffers}{\v Buffer} MicroEMACS will ask to confirm
\par {\uldb fill-paragraph}{\v fill_paragraph}\tab Fill the current paragraph
\par {\uldb filter-buffer}{\v filter_buffer}\tab Filter the current {\ul buffer}{\v Buffer} through an external filter
\par {\uldb find-file}{\v find_file}\tab Find a file to edit in the current {\ul window}{\v Window}
\par {\uldb find-screen}{\v find_screen}\tab Bring the named {\ul screen}{\v Screen} on top, creating it if needed
\par {\uldb forward-character}{\v forward_character}\tab Move one character to the right
\par {\uldb goto-line}{\v goto_line}\tab Goto a numbered line
\par {\uldb goto-mark}{\v goto_mark}\tab Goto a numbered {\ul mark}{\v Mark}
\par {\uldb goto-matching-fence}{\v goto_matching_fence}\tab Goto the matching fence
\par {\uldb grow-window}{\v grow_window}\tab Make the current {\ul window}{\v Window} larger
\par {\uldb handle-tab}{\v handle_tab}\tab Insert a tab or set tab stops
\par {\uldb hunt-backward}{\v hunt_backward}\tab Hunt for the last match of the last search string
\par {\uldb hunt-forward}{\v hunt_forward}\tab Hunt for the next match of the last search string
\par {\uldb help}{\v help}\tab Read EMACS.HLP into a {\ul buffer}{\v Buffer} and display it
\par {\uldb i-shell}{\v i_shell}\tab Shell up to a new command processor
\par {\uldb incremental-search}{\v incremental_search}\tab Search for a string, incrementally
\par {\uldb indent-region}{\v indent_region}\tab Indent the current {\ul region}{\v Region} one tab
\par {\uldb insert-file}{\v insert_file}\tab Insert a file at the {\ul point}{\v Point} in the current file
\par {\uldb insert-space}{\v insert_space}\tab Insert a space to the right of the {\ul point}{\v Point}
\par {\uldb insert-string}{\v insert_string}\tab Insert a string at the {\ul point}{\v Point}
\par {\uldb kill-paragraph}{\v kill_paragraph}\tab Delete the current paragraph
\par {\uldb kill-region}{\v kill_region}\tab Delete the current {\ul region}{\v Region}, moving it to the {\ul kill buffer}{\v KillBuffer}
\par {\uldb kill-to-end-of-line}{\v kill_to_end_of_line}\tab Delete the rest of the current line
\par {\uldb list-buffers}{\v list_buffers}\tab List all existing {\ul buffers}{\v Buffer}
\par {\uldb list-screens}{\v list_screens}\tab List all existing {\ul screens}{\v Screen}
\par {\uldb macro-to-key}{\v macro_to_key}\tab {\ul Bind}{\v Binding} a key to a {\ul macro}{\v Macro}
\par {\uldb meta-prefix}{\v meta_prefix}\tab Key used to precede all {\ul META}{\v MetaKey} commands
\par {\uldb mouse-move}{\v mouse_move}\tab Usually bound to the movement of the mouse
\par {\uldb mouse-move-down}{\v mouse_move_down}\tab Usually bound to a press on the left mouse button
\par {\uldb mouse-move-up}{\v mouse_move_up}\tab Usually bound to the release of the left mouse button
\par {\uldb mouse-region-down}{\v mouse_region_down}\tab Usually bound to a press on the right mouse button
\par {\uldb mouse-region-up}{\v mouse_region_up}\tab Usually bound to the release of the right mouse button
\par {\uldb mouse-resize-screen}{\v mouse_resize_screen}\tab Resize the screen to bring the bottom-left corner where the mouse was clicked
\par {\uldb move-window-down}{\v move_window_down}\tab Scroll the current {\ul window}{\v Window} down
\par {\uldb move-window-up}{\v move_window_up}\tab Scroll the current {\ul window}{\v Window} up
\par {\uldb name-buffer}{\v name_buffer}\tab Change the name of the current {\ul buffer}{\v Buffer}
\par {\uldb narrow-to-region}{\v narrow_to_region}\tab Hides all text not in the current {\ul region}{\v Region} (see {\uldb widen-from-region}{\v widen_from_region})
\par {\uldb newline}{\v newline}\tab Insert a newline
\par {\uldb newline-and-indent}{\v newline_and_indent}\tab Insert a newline and indent the new line the same as the preceding line
\par {\uldb next-buffer}{\v next_buffer}\tab Bring the next {\ul buffer}{\v Buffer} in the list into the current {\ul window}{\v Window}
\par {\uldb next-line}{\v next_line}\tab Move down one line
\par {\uldb next-page}{\v next_page}\tab Move down one page
\par {\uldb next-paragraph}{\v next_paragraph}\tab Move to the next paragraph
\par {\uldb next-window}{\v next_window}\tab Move to the next {\ul window}{\v Window}
\par {\uldb next-word}{\v next_word}\tab Move to the beginning of the next word
\par {\uldb nop}{\v nop}\tab Does nothing
\par {\uldb open-line}{\v open_line}\tab Open a line at the {\ul point}{\v Point}
\par {\uldb overwrite-string}{\v overwrite_string}\tab Overwrite a string at the {\ul point}{\v Point}
\par {\uldb pipe-command}{\v pipe_command}\tab Execute an external command and place its output in a {\ul buffer}{\v Buffer}
\par {\uldb pop-buffer}{\v pop_buffer}\tab Display a {\ul buffer}{\v Buffer} temporarily, paging through it
\par {\uldb previous-line}{\v previous_line}\tab Move up one line
\par {\uldb previous-page}{\v previous_page}\tab Move up one page
\par {\uldb previous-paragraph}{\v previous_paragraph}\tab Move back one paragraph
\par {\uldb previous-window}{\v previous_window}\tab Move to the last {\ul window}{\v Window}
\par {\uldb previous-word}{\v previous_word}\tab Move to the beginning of the word to the left of the {\ul point}{\v Point}
\par {\uldb print}{\v print}\tab Display a string on the {\ul message line}{\v MessageLine} (synonym of {\uldb write-message}{\v write_message})
\par {\uldb query-replace-string}{\v query_replace_string}\tab Replace occurrences of a string with another string, interactively querying the user
\par {\uldb quick-exit}{\v quick_exit}\tab Exit MicroEMACS, writing out all the changed {\ul buffers}{\v Buffer}
\par {\uldb quote-character}{\v quote_character}\tab Insert the next character literally
\par {\uldb read-file}{\v read_file}\tab Read a file into the current {\ul buffer}{\v Buffer}
\par {\uldb redraw-display}{\v redraw_display}\tab Reposition the current line in the {\ul window}{\v Window}
\par {\uldb remove-mark}{\v remove_mark}\tab Remove a numbered {\ul mark}{\v Mark}
\par {\uldb replace-string}{\v replace_string}\tab Replace all occurrences of a string with another string
\par {\uldb resize-window}{\v resize_window}\tab Change the number of lines in the current {\ul window}{\v Window}
\par {\uldb restore-window}{\v restore_window}\tab Move to the last saved {\ul window}{\v Window} (see {\uldb save-window}{\v save_window})
\par {\uldb reverse-incremental-search}{\v reverse_incremental_search}\tab Search backwards, incrementally
\par {\uldb run}{\v run}\tab Execute a named {\ul procedure}{\v Macro}
\par {\uldb save-file}{\v save_file}\tab Save the current {\ul buffer}{\v Buffer} if it is changed
\par {\uldb save-window}{\v save_window}\tab Remember the current {\ul window}{\v Window} (see {\uldb restore-window}{\v restore_window})
\par {\uldb scroll-next-up}{\v scroll_next_up}\tab Scroll the next {\ul window}{\v Window} up
\par {\uldb scroll-next-down}{\v scroll_next_down}\tab Scroll the next {\ul window}{\v Window} down
\par {\uldb search-forward}{\v search_forward}\tab Search for a string
\par {\uldb search-reverse}{\v search_reverse}\tab Search backwards for a string
\par {\uldb select-buffer}{\v select_buffer}\tab Select a {\ul buffer}{\v Buffer} to display in the current {\ul window}{\v Window}
\par {\uldb set}{\v set}\tab Set a {\ul variable}{\v Variable} to a value
\par {\uldb set-encryption-key}{\v set_encryption_key}\tab Set the encryption key of the current {\ul buffer}{\v Buffer}
\par {\uldb set-mark}{\v set_mark}\tab Set a numbered {\ul mark}{\v Mark}
\par {\uldb shell-command}{\v shell_command}\tab Causes an external shell to execute a command
\par {\uldb show-files}{\v show_files}\tab list files matching a pattern within a directory
\par {\uldb shrink-window}{\v shrink_window}\tab Make the current {\ul window}{\v Window} smaller
\par {\uldb source}{\v source}\tab Execute a file as a {\ul macro}{\v Macro}
\par {\uldb split-current-window}{\v split_current_window}\tab Split the current {\ul window}{\v Window} in two
\par {\uldb store-macro}{\v store_macro}\tab Store the following {\ul macro}{\v Macro} lines as a numbered macro
\par {\uldb store-procedure}{\v store_procedure}\tab Store the following {\ul macro}{\v Macro} lines in a named procedure
\par {\uldb transpose-characters}{\v transpose_characters}\tab Transpose the character at the {\ul point}{\v Point} with the character immediately to the left
\par {\uldb trim-region}{\v trim_region}\tab Trim any trailing white space from a {\ul region}{\v Region}
\par {\uldb unbind-key}{\v unbind_key}\tab {\ul Unbind}{\v Binding} a key from a {\ul command}{\v Command} or {\ul macro}{\v Macro}
\par {\uldb undent-region}{\v undent_region}\tab Remove a leading indent from a {\ul region}{\v Region}
\par {\uldb universal-argument}{\v universal_argument}\tab Execute the following {\ul command}{\v Command} or {\ul macro}{\v Macro} 4 times
\par {\uldb unmark-buffer}{\v unmark_buffer}\tab Unmark the current {\ul buffer}{\v Buffer} (so it is no longer seen as changed)
\par {\uldb update-screen}{\v update_screen}\tab Force a display update during {\ul macro}{\v Macro} execution
\par {\uldb view-file}{\v view_file}\tab Read a file in a {\ul buffer}{\v Buffer}, in view mode
\par {\uldb widen-from-region}{\v widen_from_region}\tab Restores hidden text (see {\uldb narrow-to-region}{\v narrow_to_region})
\par {\uldb wrap-word}{\v wrap_word}\tab Wrap the current word (internal command)
\par {\uldb write-file}{\v write_file}\tab Write the current {\ul buffer}{\v Buffer} under a new file name
\par {\uldb write-message}{\v write_message}\tab Display a string on the {\ul message line}{\v MessageLine}
\par {\uldb yank}{\v yank}\tab Yank the {\ul kill buffer}{\v KillBuffer} into the current {\ul buffer}{\v Buffer} at the {\ul point}{\v Point}
\par {\uldb yank-pop}{\v yank_pop}\tab yank the {\ul kill buffer}{\v KillBuffer}, subsequent invocations replacing the yanked text by the next one from the {\ul kill ring}{\v KillRing}.
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Additional commands}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 AdditionalCommands}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} CommandsByTopic:zzz910}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} Additionnal commands;Microsoft Windows;MS Windows}}
 Additional commands
\par \pard\plain \s6\sa120 \f4\fs20 The following commands are available only from the Microsoft Windows version of MicroEMACS:
\par \pard\plain \s2\fi-2520\li2880\sa120\tx2880 \f4\fs20 {\uldb bind-to-menu}{\v bind_to_menu}\tab creates a menu item and {\ul binds}{\v Binding} it to a {\ul command}{\v Command}
\par {\uldb cascade-screens}{\v cascade_screens}\tab arranges all non-iconic {\ul screens}{\v Screen} using a cascading scheme
\par {\uldb clip-region}{\v clip_region}\tab copies the {\ul region}{\v Region} to the Windows {\ul clipboard}{\v Clipboard}
\par {\uldb cut-region}{\v cut_region}\tab moves the {\ul region}{\v Region} to the Windows {\ul clipboard}{\v Clipboard}
\par {\uldb help-engine}{\v help_engine}\tab invokes the Microsoft Windows help engine
\par {\uldb insert-clip}{\v insert_clip}\tab inserts the contents of the Windows {\ul clipboard}{\v Clipboard} at the {\ul point}{\v Point}
\par {\uldb macro-to-menu}{\v macro_to_menu}\tab creates a menu item and binds it to a {\ul macro}{\v Macro}
\par {\uldb maximize-screen}{\v maximize_screen}\tab makes the current {\ul screen}{\v Screen} occupy the whole MicroEMACS window
\par {\uldb minimize-screen}{\v minimize_screen}\tab iconizes the current {\ul screen}{\v Screen}
\par {\uldb rename-screen}{\v rename_screen}\tab change the current {\ul screen}{\v Screen}'s name
\par {\uldb restore-screen}{\v restore_screen}\tab restores the current {\ul screen}{\v Screen} back from maximized  or iconized state
\par {\uldb tile-screens}{\v tile_screens}\tab arranges all non-iconic {\ul screens}{\v Screen} using a tiling scheme
\par {\uldb unbind-menu}{\v unbind_menu}\tab deletes a menu item
\par \pard\plain \s253\sa240\tx2880 \b\f4\cf2 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Directives}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} Directives}
} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} MacroLanguage:020}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} directives;macro}} Directives
\par \pard\plain \s6\sa120 \f4\fs20 Directives are used within {\uldb macros}{\v MacroLanguage} to control what lines are executed and in what order.
\par Directives always start with the exclamation mark "!" character and must be the first non-white text placed on a line. They are:
\par \pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb !BREAK}{\v .BREAK}
\par {\uldb !ENDM}{\v .ENDM}
\par {\uldb !FORCE}{\v .FORCE}
\par {\uldb !GOTO}{\v .GOTO}
\par {\uldb !IF}{\v .IF}, {\uldb !ELSE}{\v .IF} and {\uldb !ENDIF}{\v .IF}
\par {\uldb !RETURN}{\v .RETURN}
\par \pard \s11\li360\sa120\tx2880 {\uldb !WHILE}{\v .WHILE} and {\uldb !ENDWHILE}{\v .WHILE}
\par \pard\plain \s6\sa120 \f4\fs20 Directives do not make sense as a single commands. As such, they cannot be called up singly or bound to keystrokes.Directives executed interactively (via the {\uldb execute-command-line}{\v execute_command_line}
 command) are ignored.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} !BREAK directive}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 .BREAK}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Directives:BREAK}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} !BREAK;!WHILE;loop}} !BREAK
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb directive}{\v Directives} lets you abort out of the most inner currently executing {\uldb while loop}{\v .WHILE}, in a {\uldb macro}{\v MacroLanguage}
. It is often used to abort processing for error conditions. For example:
\par \pard\plain \s4\fi-2160\li2880\tx2880 \f27\fs18 ; Read in files and substitute "beginning" with "beginning"
\par set %filename #list
\par \pard \s4\fi-2160\li2880\sa120\tx2880 !while &not &seq %filename "<end>"
\par \pard \s4\fi-2160\li2880\tx2880 !force    find-file %filename
\par     !if &seq $status FALSE
\par         write-message "[File read error]"
\par         {\b !break}
\par     !endif
\par     beginning-of-file
\par     replace-string "beginning" "beginning"
\par     save-file
\par     set %filename #list
\par \pard \s4\fi-2160\li2880\sa120\tx2880 !endwhile
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} !ENDM directive}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} .ENDM
}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Directives:endm}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} !ENDM;macro}} !ENDM
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb directive}{\v Directives} is used to terminate a macro{\v MacroLanguage} being stored. For example:
\par \pard\plain \s4\fi-2160\li2880\tx2880 \f27\fs18 ; Read in a file in view mode, and make the window red
\par store-procedure get-red-viewed-file
\par     view-file @"File to view: "
\par     add-mode "red"
\par \pard \s4\fi-2160\li2880\sa120\tx2880 {\b !endm}
\par \pard\plain \s6\sa120 \f4\fs20 Related commands:
\par \pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb store-procedure}{\v store_procedure}
\par \pard \s11\li360\sa120\tx2880 {\uldb store-macro}{\v store_macro}.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} !FORCE directive}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 .FORCE}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Directives:force}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} !FORCE;error}} !FORCE
\par \pard\plain \s6\sa120 \f4\fs20 When MicroEMACS executes a {\uldb macro}{\v MacroLanguage}, if any command fails, the macro is terminated at that point. If a line is preceded by a !FORCE {\uldb directive}{\v Directives}
, execution continues whether the command succeeds or not.
\par This is often used together with the {\uldb $status}{\v _status} variable to test if a command succeeded. For example:
\par \pard\plain \s4\fi-2160\li2880\tx2880 \f27\fs18 set %seekstring @"String to Find: "
\par {\b !force} search-forward %seekstring
\par !if {\b $status}
\par     print "Your string is Found"
\par !else
\par     print "No such string!"
\par \pard \s4\fi-2160\li2880\sa120\tx2880 {\f11 !endif
\par }\pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} !GOTO directive}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 .GOTO}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Directives:goto}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} !GOTO;!WHILE;loop}} !GOTO
\par \pard\plain \s6\sa120 \f4\fs20 The flow of execution within a MicroEMACS {\uldb macro}{\v MacroLanguage} can be controlled using the !GOTO {\uldb directive}{\v Directives}
. It takes a label as argument. A label consists of a line starting with an asterisk "*" and then an alphanumeric label. Only labels in the currently executing macro can be jumped to, and trying to jump to a non-existing label terminates execution of a ma
cro. For example:
\par \pard\plain \s4\fi-2160\li2880\tx2880 \f27\fs18 ; Create a block of DATA statements for a BASIC program
\par insert-string "1000 DATA "
\par set %linenum 1000
\par {\b *nxtin}
\par update-screen    ;make sure we see the changes
\par set %data @@"Next number: "
\par !if &equal %data 0
\par     {\b !goto} finish
\par !endif
\par !if &greater $curcol 60
\par     2 delete-previous-character
\par     newline
\par     set %linenum &add %linenum 10
\par     insert-string &cat %linenum " DATA "
\par !endif
\par insert-string &cat %data ", "
\par {\b !goto} nxtin
\par {\b *finish}
\par 2 delete-previous-character
\par \pard \s4\fi-2160\li2880\sa120\tx2880 newline
\par \pard\plain \s6\sa120 \f4\fs20 Note that loops constructed with {\uldb !WHILE}{\v .WHILE} are usually more efficient than those constructed purely by !GOTOs.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} !IF, !ELSE and !ENDIF directives}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {
\fs16\up6 #} .IF}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Directives:if}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} !IF;!ELSE;!ENDIF}} !IF, !ELSE and !ENDIF
\par \pard\plain \s6\sa120 \f4\fs20 The !IF {\uldb directive}{\v Directives} allows for conditional execution within a {\uldb macro}{\v MacroLanguage}.
\par Lines following the !IF directive, until the corresponding !ELSE or !ENDIF, are executed only if the expression within the !IF line {\uldb evaluates}{\v Arguments}
 to a TRUE value. Lines following an !ELSE directive, until the corresponding !ENDIF, are executed only if the expression within the corresponding !IF line did not evaluate to a TRUE value.
\par For example, the following macro creates the portion of a text file automatically:
\par \pard\plain \s4\fi-2160\li2880\tx2880 \f27\fs18 {\b !if} &sequal %curplace "timespace vortex"
\par     insert-string "First, rematerialize~n"
\par {\b !endif}
\par {\b !if} &sequal %planet "earth"    ;If we have landed on earth...
\par     {\b !if} &sequal %time "late 20th century"    ;and we are then
\par         write-message "Contact U.N.I.T."
\par     {\b !else}
\par         insert-string "Investigate the situation....~n"
\par         insert-string "(SAY 'stay here Sarah)~n"
\par     {\b !endif}
\par {\b !else}
\par     set %conditions @"Atmosphere conditions outside? "
\par     {\b !if} &sequal %conditions "safe"
\par         insert-string &cat "Go outside......" "~n"
\par         insert-string "lock the door~n"
\par     {\b !else}
\par         insert-string "Dematerialize..try somewhen else"
\par         newline
\par     {\b !endif}
\par \pard \s4\fi-2160\li2880\sa120\tx2880 {\b !endif}
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} !RETURN directive}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 .RETURN}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Directives:return}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} !RETURN}} !RETURN
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb directive}{\v Directives} causes the current {\uldb macro}{\v MacroLanguage} to exit, either returning to the caller (if any) or to interactive mode. For example:
\par \pard\plain \s4\fi-2160\li2880\tx2880 \f27\fs18 ; Check the display type and set %wintyp
\par !if &sequal $sres "MSWIN"
\par     set %wintyp 1
\par     {\b !return}
\par !endif
\par set %wintyp 0
\par write-message "You are not running under MS-Windows!"
\par \pard \s4\fi-2160\li2880\sa120\tx2880 {\b !return}
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} !WHILE and !ENDWHILE directives}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {
\fs16\up6 #} .WHILE}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Directives:while}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} !WHILE;!ENDWHILE;loop;!BREAK}} !WHILE and !ENDWHILE
\par \pard\plain \s6\sa120 \f4\fs20 This pair of {\uldb directives}{\v Directives} facilitates repetitive execution within a {\uldb macro}{\v MacroLanguage}. If a group of statements needs to be executed while a certain expression {\uldb evaluates}{\v 
Arguments} to TRUE, enclose them with a while loop. For example:
\par \pard\plain \s4\fi-2160\li2880\tx2880 \f27\fs18 {\b !while} &less $curcol 70
\par     insert-string &cat &cat "[" #stuff "]"
\par \pard \s4\fi-2160\li2880\sa120\tx2880 {\b !endwhile
\par }\pard\plain \s6\sa120 \f4\fs20 While loops may be nested and can contain and be the targets of {\uldb !GOTOs}{\v .GOTO} with no ill effects.  Using a while loop to enclose a repeated task will run much faster than the corresponding construct using {
\uldb !IFs}{\v .IF}.
\par \pard\plain \s253\sa240\tx2880 \b\f4\cf2 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Arguments}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} Arguments}} 
{\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} MacroLanguage:030}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} argument;evaluate;expression;}} Arguments
\par \pard\plain \s6\sa120 \f4\fs20 In the MicroEMACS {\uldb macro language}{\v MacroLanguage}, {\uldb commands}{\v Commands} and {\uldb functions}{\v Functions}
 often require arguments. There are three types of arguments and they are automatically converted to the proper type when used:
\par \pard\plain \s2\fi-2520\li2880\sa120\tx2880 \f4\fs20 {\b Numerical}\tab An ASCII string of digits which is interpreted as a numeric value. Any string which does not start with a digit or a minus sign "{\b -}" will be considered zero.
\par {\b String}\tab An arbitrary string of characters. Strings are limited to 128 characters in length. 
\par {\b Boolean}\tab A logical value consisting of the string "TRUE" or "FALSE". Numeric strings will also evaluate to "FALSE" if they are equal to zero, and "TRUE" if they are non-zero. Arbitrary text strings will be considered equivalent "FALSE".
\par \pard\plain \s6\sa120 \f4\fs20 While arguments usually follow the command or function that uses them, a single numerical argument can also be placed in front of a command, producing an effect similar to the {\uldb numeric arguments}{\v NumericArguments}
 used in interactive mode.
\par If a command needs more arguments than have be supplied on the line, the command fails.
\par \pard\plain \s253\sa240\tx2880 \b\f4\cf2 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Constants}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} Constants}} 
{\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} MacroLanguage:040}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} constants;macro}} Constants
\par \pard\plain \s6\sa120 \f4\fs20 Wherever {\uldb macro language}{\v MacroLanguage} statements need to have {\uldb arguments}{\v Arguments}
, it is legal to place constants. A constant is a double quote character, followed by a string of characters, and terminated by another double quote character.
\par The double quotes around constants are not needed if the constant contains no white space and it also does not happen to meet the rules for any other MicroEMACS {\uldb commands}{\v Commands}, {\uldb directives}{\v Directives}, {\uldb variables}{\v 
Variables}, or {\uldb functions}{\v Functions}. This is very practical for numeric constants.
\par To represent various special characters within a constant, the tilde "~" character is used. The character following the tilde is interpreted according to the following table:
\par \pard\plain \s7\fi-1080\li1440\sa120\tx1440\tx2880 \f4\fs20 {\b Sequence}\tab {\b Meaning}
\par ~"\tab double quote
\par ~~\tab tilde
\par ~b\tab backspace ({\ul ^H}{\v Keystroke})
\par ~f\tab formfeed ({\ul ^L}{\v Keystroke})
\par ~l\tab linefeed ({\ul ^J}{\v Keystroke})
\par ~n\tab newline
\par ~r\tab carriage return ({\ul ^M}{\v Keystroke})
\par ~t\tab tab ({\ul ^I}{\v Keystroke})
\par \pard\plain \s6\sa120 \f4\fs20 Any character not in the above table which follows a tilde will be passed unmodified. This action is similar to the {\uldb quote-character}{\v quote_character} ({\ul ^Q}{\v Keystroke}) command available from the keyboard.

\par MicroEMACS may use different characters for line terminators on different computers. The "{\b ~n}" combination will always get the proper line terminating sequence for the current system.
\par \pard\plain \s253\sa240\tx2880 \b\f4\cf2 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Variables}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} Variables}} 
{\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} MacroLanguage:050}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} variable;macro}} Variables
\par \pard\plain \s6\sa120 \f4\fs20 Variables are part of the MicroEMACS {\uldb Macro language}{\v MacroLanguage}. They can be used wherever an {\uldb argument}{\v Arguments} (number, boolean or string) is needed.
\par {\uldb Environmental variables}{\v EnvironmentalVariables} both control and report on different aspects of the editor. {\uldb User variables}{\v UserVariables} hold values which may be changed and inspected. {\uldb Buffer variables}{\v BufferVariables}
 allow lines from {\ul buffers}{\v Buffer} to be used as values. {\uldb Interactive variables}{\v InteractiveVariables} allow macros to prompt the user for information.
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Buffer Variables}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 BufferVariables}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Variables:buffervariables}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} buffer;variable}} Buffer Variables
\par \pard\plain \s6\sa120 \f4\fs20 Buffer {\uldb variables}{\v Variables}
 are a way to take a line of text from a buffer and place it in a variable. They can only be queried and cannot be set. A buffer variable consists of the buffer name, preceded by a pound sign "#". Its value is the text between the point and the end of the
 line. Each use of a buffer variable advances the point to the beginning of the following line.
\par For example, if you have a buffer by the name of RIGEL2, and it contains the text (the point being on the "B" of "Bloomington"): 
\par \pard\plain \s4\fi-2160\li2880\tx2880 \f27\fs18 Richmond
\par Lafayette
\par {\b B}loomington
\par Indianapolis
\par \pard \s4\fi-2160\li2880\sa120\tx2880 Gary
\par \pard\plain \s6\sa120 \f4\fs20 and within a command you reference #rigel2, like in:
\par \pard\plain \s4\fi-2160\li2880\sa120\tx2880 \f27\fs18 insert-string #rigel2
\par \pard\plain \s6\sa120 \f4\fs20 MicroEMACS would start at the current point in the RIGEL2 buffer and 
grab all the text up to the end of that line and pass that back. Then it would advance the point to the beginning of the next line. Thus, after the insert-string command executes, the string "Bloomington" gets inserted into the current buffer, and the buf
fer RIGEL2 now looks like this (the point is on the "I" of "Indianapolis"):
\par \pard\plain \s4\fi-2160\li2880\tx2880 \f27\fs18 Richmond
\par Lafayette
\par Bloomington
\par {\b I}ndianapolis
\par \pard \s4\fi-2160\li2880\sa120\tx2880 Gary
\par \pard\plain \s6\sa120 \f4\fs20 When the end of a buffer variable is reached, the value returned is: {\f27\fs18 <END>}
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Environmental Variables}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} {
\f10 EnvironmentalVariables}}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Variables:{\f10 environmentalvariables}}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} variable}} Environmental Variables

\par \pard\plain \s6\sa120 \f4\fs20 These {\uldb variables}{\v Variables}
 are used to change or get information about various aspects of the editor. They return a current setting if used as part of an expression. All environmental variable names begin with a dollar sign "$" and are in lower case:
\par \pard\plain \s7\fi-1440\li1800\tx1800 \f4\fs20 {\uldb $acount}{\v _acount}\tab Countdown until next auto-save
\par {\uldb $asave}{\v _asave}\tab Auto-save frequency
\par {\uldb $bufhook}{\v _bufhook}\tab Command/macro run when entering a buffer
\par {\uldb $cbflags}{\v _cbflags}\tab Buffer attribute flags.
\par {\uldb $cbufname}{\v _cbufname}\tab Buffer name
\par {\uldb $cfname}{\v _cfname}\tab File name
\par {\uldb $cmdhook}{\v _cmdhook}\tab Command/macro run before each keystroke
\par {\uldb $cmode}{\v _cmode}\tab Buffer modes
\par {\uldb $curchar}{\v _curchar}\tab ASCII value of character
\par {\uldb $curcol}{\v _curcol}\tab Current column
\par {\uldb $curline}{\v _curline}\tab Current line
\par {\uldb $curwidth}{\v _curwidth}\tab Number of columns
\par {\uldb $curwind}{\v _curwind}\tab Window index
\par {\uldb $cwline}{\v _cwline}\tab Line number in current window
\par {\uldb $debug}{\v _debug}\tab Macro debugging flag
\par {\uldb $deskcolor}{\v _deskcolor}\tab Color for desktop
\par {\uldb $diagflag}{\v _diagflag}\tab Diagonal dragging flag
\par {\uldb $discmd}{\v _discmd}\tab Prompt echo flag
\par {\uldb $disinp}{\v _disinp}\tab Input echo flag
\par {\uldb $disphigh}{\v _disphigh}\tab High-bit characters display flag
\par {\uldb $dispundo}v _dispundo\tab Display the undo stack depth on the modeline
\par {\uldb $exbhook}{\v _exbhook}\tab Command/macro run when leaving a buffer.
\par {\uldb $fcol}{\v _fcol}\tab Line number at top of window
\par {\uldb $fillcol}{\v _fillcol}\tab Fill column.
\par {\uldb $flicker}{\v _flicker}\tab Flicker flag (for CGA or animated grinder cursor)
\par {\uldb $fmtlead}{\v _fmtlead}\tab Text formatter command prefixes
\par {\uldb $gflags}{\v _gflags}\tab Global flags
\par {\uldb $gmode}{\v _gmode}\tab Global mode flags
\par {\uldb $hardtab}{\v _hardtab}\tab Size of hard tabs
\par {\uldb $hilight}{\v _hilight}\tab Region to be highlighted
\par {\uldb $hjump}{\v _hjump}\tab Horizontal scrolling quantum
\par {\uldb $hscroll}{\v _hscroll}\tab Horizontal scrolling flag
\par {\uldb $hscrlbar}{\v _hscrlbar}\tab Horizontal scroll bar flag
\par {\uldb $isterm}{\v _isterm}\tab Incremental search string terminator key
\par {\uldb $kill}{\v _kill}\tab Kill buffer contents
\par {\uldb $language}{\v _language}\tab National language used by MicroEMACS
\par {\uldb $lastkey}{\v _lastkey}\tab Last keyboard character
\par {\uldb $lastmesg}{\v _lastmesg}\tab Last message
\par {\uldb $line}{\v _line}\tab Current line contents
\par {\uldb $lterm}{\v _lterm}\tab Line terminator string
\par {\uldb $lwidth}{\v _lwidth}\tab Width of current line
\par {\uldb $match}{\v _match}\tab Last string matched in a search
\par {\uldb $mmove}{\v _mmove}\tab Controls the generation of mouse movements
\par {\uldb $modeflag}{\v _modeflag}\tab Mode line display flag
\par {\uldb $msflag}{\v _msflag}\tab Mouse flag
\par {\uldb $numwind}{\v _numwind}\tab Number of windows
\par {\uldb $oldcrypt}{\v _oldcrypt}\tab Encryption method flag
\par {\uldb $orgrow}{\v _orgrow}\tab Row of current screen within desktop
\par {\uldb $orgcol}{\v _orgcol}\tab Column of current screen within desktop
\par {\uldb $os}{\v _os}\tab Operating system (MSWIN under MS-Windows)
\par {\uldb $overlap}{\v _overlap}\tab Size of overlap during paging
\par {\uldb $pagelen}{\v _pagelen}\tab Number of lines in screen
\par {\uldb $palette}{\v _palette}\tab Color palette settings
\par {\uldb $paralead}{\v _paralead}\tab Paragraph start characters
\par {\uldb $pending}{\v _pending}\tab Keystrokes pending flag
\par {\uldb $popflag}{\v _popflag}\tab Popup buffer flag
\par {\uldb $posflag}{\v _posflag}\tab Row&column display flag
\par {\uldb $progname}{\v _progname}\tab "MicroEMACS"
\par {\uldb $readhook}{\v _readhook}\tab Command/macro run when a file is read
\par {\uldb $region}{\v _region}\tab Contents of current region
\par {\uldb $replace}{\v _replace}\tab Default replace string.
\par {\uldb $rval}{\v _rval}\tab Exit value from last invoked subprocess
\par {\uldb $scrname}{\v _scrname}\tab Screen name
\par {\uldb $search}{\v _search}\tab Default search string
\par {\uldb $searchpnt}{\v _searchpnt}\tab After-search-positioning flag
\par {\uldb $seed}{\v _seed}\tab Random number generator seed
\par {\uldb $softtab}{\v _softtab}\tab Tab size for handle-tab command
\par {\uldb $sres}{\v _sres}\tab Display resolution (MSWIN under MS-Windows)
\par {\uldb $ssave}{\v _ssave}\tab Safe-save flag
\par {\uldb $sscroll}{\v _sscroll}\tab Smooth scroll flag
\par {\uldb $status}{\v _status}\tab Status from last command
\par {\uldb $sterm}{\v _sterm}\tab Search string terminator key
\par {\uldb $target}{\v _target}\tab Target for line moves
\par {\uldb $time}{\v _time}\tab Date and time
\par {\uldb $timeflag}{\v _timeflag}\tab Time display flag
\par {\uldb $tpause}{\v _tpause}\tab Duration of fence matching pause
\par {\uldb $undoflag}{\v _undoflag}\tab Track undo information
\par {\uldb $version}{\v _version}\tab MicroEMACS version
\par {\uldb $vscrlbar}{\v _vscrlbar}\tab Vertical scroll bar flag
\par {\uldb $wchars}{\v _wchars}\tab List of characters that can be part of a word
\par {\uldb $wline}{\v _wline}\tab Window height (lines)
\par {\uldb $wraphook}{\v _wraphook}\tab Command/macro run when wrapping text
\par {\uldb $writehook}{\v _writehook}\tab Command/macro run when writing a file
\par {\uldb $xpos}{\v _xpos}\tab Column the mouse was in at last click
\par {\uldb $yankflag}{\v _yankflag}\tab After-yank-positioning flag
\par {\uldb $ypos}{\v _ypos}\tab Line the mouse was in at last click
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $acount variable}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 _acount}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:acount}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $acount;ASAVE;autosave}} $acount
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} is used in {\uldb ASAVE mode}{\v ASAVE}. It contains the countdown on inserted character until the next auto-save. When it reaches zero, it is reset to the value of {\uldb $asave}{\v 
_asave}.
\par Initial value: 256
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $asave variable}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 _asave}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:asave}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $asave;ASAVE;autosave}} $asave
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} is used in {\uldb ASAVE mode}{\v ASAVE}. It specifies the value used to reset {\uldb $acount}{\v _acount} after an automatic save occurs.
\par Default value: 256
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $bufhook variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _bufhook}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:bufhook}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $bufhook;hook;buffer}} $bufhook
\par \pard\plain \s6\sa120 \f4\fs20 The {\ul command}{\v Command} or {\ul macro}{\v Macro} named in this {\uldb variable}{\v Variables} is run when a {\ul buffer}{\v Buffer} is entered. This can be used to implement {\uldb modes}{\v ModesOfOperation}
 which are specific to a particular file or file type.
\par Default value: {\uldb nop}{\v nop}
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $cbflags variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _cbflags}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:cbflags}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $cbflags}} $cbflags
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the current {\ul buffer}{\v Buffer}'s attribute flags, encoded as the sum of the following numbers:
\par \pard\plain \s7\fi-1080\li1440\tx1440\tx2880 \f4\fs20 1\tab Internal invisible buffer
\par 2\tab Changed since last read or write
\par 4\tab Buffer was truncated when read (due to lack of memory)
\par \pard \s7\fi-1080\li1440\sa120\tx1440\tx2880 8\tab Buffer has been {\uldb narrowed}{\v NarrowingYourScope}
\par \pard\plain \s6\sa120 \f4\fs20 Only the invisible (1) and changed (2) flags can be modified by setting $cbflags. The truncated file (4) and narrowed (8) flags are read-only.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $cbufname variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _cbufname}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:cbufname}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $cbufname;buffer}} $cbufname
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the name of the current {\ul buffer}{\v Buffer}.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $cfname variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _cfname}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:cfname}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $cfname;file;buffer}} $cfname
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the file name associated to the current {\ul buffer}{\v Buffer}.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $cmdhook variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _cmdhook}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:cmdhook}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $cmdhook;hook;keyboard}} $cmdhook
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the name of a {\ul command}{\v Command} or {\ul macro}{\v Macro} to run before accepting a keystroke. This is by default set to the {\uldb nop}{\v nop} command.
\par Default value: {\uldb nop}{\v nop}
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $cmode and $gmode variables}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _cmode}} {\plain 
\f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:cmode}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $cmode;$gmode;mode}} $cmode{\plain \f4\fs20  and }$gmode
\par \pard\plain \s6\sa120 \f4\fs20 The two {\uldb variables}{\v Variables} $cmode and $gmode contain a number that corresponds to the {\uldb modes}{\v ModesOfOperation} for the current {\ul buffer}{\v Buffer}
 ($cmode) and the new buffers ($gmode). They are encoded as the sum of the following numbers for each of the possible modes:
\par \pard\plain \s13\fi-2520\li2880\tqr\tx1800\tx2880 \f4\fs20 {\uldb WRAP}{\v WRAP}\tab 1\tab Word wrap
\par {\uldb CMODE}{\v CMODE}\tab 2\tab C indentation and fence matching
\par {\b SPELL}\tab 4\tab Interactive spell checking (Not implemented yet)
\par {\uldb EXACT}{\v EXACT}\tab 8\tab Exact matching for searches
\par {\uldb VIEW}{\v VIEW}\tab 16\tab Read-only buffer
\par {\uldb OVER}{\v OVER}\tab 32\tab Overwrite mode
\par {\uldb MAGIC}{\v MAGIC}\tab 64\tab Regular expressions in search
\par {\uldb CRYPT}{\v CRYPT}\tab 128\tab Encryption mode active
\par \pard \s13\fi-2520\li2880\sa120\tqr\tx1800\tx2880 {\uldb ASAVE}{\v ASAVE}\tab 256\tab Auto-save mode
\par \pard\plain \s6\sa120 \f4\fs20 Thus, if you wished to set the current buffer to have CMODE, EXACT, and MAGIC on, and all the others off, you would add up the values for those three, CMODE 2 + EXACT 8 + MAGIC 64 = 74, and use a statement like:
\par \pard\plain \s4\fi-2160\li2880\sa120\tx2880 \f27\fs18 set  $cmode  74
\par \pard\plain \s6\sa120 \f4\fs20 or, use the binary or operator to combine the different modes:
\par \pard\plain \s4\fi-2160\li2880\sa120\tx2880 \f27\fs18 set  $cmode  &bor  &bor  2  8  64
\par \pard\plain \s6\sa120 \f4\fs20 Alternatively, you can also modify the modes one by one, using the {\uldb add-mode}{\v add_mode} and {\uldb add-global-mode}{\v add_global_mode} or {\uldb delete-mode}{\v delete_mode} and {\uldb delete-global-mode}{\v 
delete_global_mode} commands
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $curchar variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _curchar}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:curchar}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $curchar}} $curchar
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the ASCII value of the character currently at the {\ul point}{\v Point}.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $curcol variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _curcol}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:curcol}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $curcol}} $curcol
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the column (starting at 0) of the {\ul point}{\v Point} in the current {\ul buffer}{\v Buffer}.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $curline variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _curline}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:curline}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $curline}} $curline
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the line number (starting at 1) of the {\ul point}{\v Point} in the current {\ul buffer}{\v Buffer}.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $curwidth variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _curwidth}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:curwidth}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $curwidth}} $curwidth
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the number of columns displayed in the current {\ul screen}{\v Screen}.
\par Setting this variable is equivalent to using the {\uldb change-screen-width}{\v change_screen_width} command with a {\ul numeric argument}{\v Argument}.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $curwind variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _curwind}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:curwind}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $curwind}} $curwind
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the index of the current {\ul window}{\v Window} within the {\ul screen}{\v Screen}
. Windows are numbered from top to bottom, starting at 1. The number of windows within the current screen is held by the {\uldb $numwind}{\v _numwind} variable.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $cwline variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _cwline}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:cwline}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $cwline}} $cwline
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the number of lines displayed in the current {\ul window}{\v Window}.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $debug variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _debug}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:debug}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $debug}} $debug
\par \pard\plain \s6\sa120 \f4\fs20 This boolean {\uldb variable}{\v Variables} contains a flag used to trigger {\ul macro}{\v Macro}
 debugging. If it is set to TRUE, macros are executed step by step, and each statement and variable assignment is displayed on the {\ul message line}{\v MessageLine}.
\par Default value: FALSE
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $deskcolor variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _deskcolor}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:deskcolor}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $deskcolor}} $deskcolor
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the color to use for the desktop. In the MS-Windows version of MicroEMACS, the value of this variable is irrelevant.
\par Default value: BLACK.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $diagflag variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _diagflag}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:diagflag}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $diagflag}} $diagflag
\par \pard\plain \s6\sa120 \f4\fs20 If this boolean {\uldb variable}{\v Variables} is set to TRUE, diagonal {\uldb dragging}{\v ScrollingTextInsideAWindow}
 of text and mode lines is enabled. If it is FALSE, text and modelines can either be dragged horizontally or vertically but not both at the same time.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $discmd variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _discmd}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:discmd}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $discmd}} $discmd
\par \pard\plain \s6\sa120 \f4\fs20 If this boolean {\uldb variable}{\v Variables} is set to TRUE, the echoing of command prompts and output on the {\ul message line}{\v MessageLine}
 is enabled. If it is FALSE, most messages and prompts are disabled (this is handy to avoid some cases of message line flashing while a macro is running).
\par Default value: TRUE.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $disinp variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _disinp}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:disinp}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $disinp}} $disinp
\par \pard\plain \s6\sa120 \f4\fs20 If this boolean {\uldb variable}{\v Variables} is set to TRUE, the echoing of input at the command prompts is enabled.
\par Default value: TRUE.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $disphigh variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _disphigh}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:disphigh}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $disphigh}} $disphigh
\par \pard\plain \s6\sa120 \f4\fs20 If this boolean {\uldb variable}{\v Variables} is set to TRUE, high-bit characters (single byte characters that are greater than 127 in value) will be displayed in a pseudo-control format. The characters "{\b ^!}
" will lead off the sequence, followed by the character stripped of its high bit.
\par Default value: FALSE.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $dispundo variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _dispundo}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:dispundo}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $dispundo}} $dispundo
\par \pard\plain \s6\sa120 \f4\fs20 If this boolean {\uldb variable}{\v Variables} is set to TRUE, MicroEMACS diplays the number of saved basic operations for the current buffer on the current modeline.
\par Default value: TRUE.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $exbhook variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _exbhook}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:exbhook}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $exbhook;hook;buffer}} $exbhook
\par \pard\plain \s6\sa120 \f4\fs20 This variable holds the name of a {\ul command}{\v Command} or {\ul macro}{\v Macro} which is run whenever you are switching out of a {\ul buffer}{\v Buffer}.
\par Default value: {\uldb nop}{\v nop}
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $fcol variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _fcol}} {\plain \f4\fs16\up6 +{\footnote 
\pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:fcol}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $fcol}} $fcol
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the line position being displayed in the first column of the current window.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $fillcol variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _fillcol}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:fillcol}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $fillcol;fill}} $fillcol
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the current fill column. It is used by the {\uldb fill-paragraph}{\v fill_paragraph} command. It can be set through the {\uldb set}{\v set} command.
\par Default value: 72
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $flicker variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _flicker}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:flicker}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $flicker;grinder;hourglass}} $flicker
\par \pard\plain \s6\sa120 \f4\fs20 In the MS-DOS version of MicroEMACS, this {\uldb variable}{\v Variables} contains a flicker flag that should be set to TRUE if the display is an IBM CGA and set to FALSE for most others.
\par In the MS-Windows version of MicroEMACS, this variable can be set to FALSE to allow an animated grinder to be displayed in place of the hourglass mouse cursor. Since this animation results, on many video displays, in an annoying flicker of the cursor, it 
is disabled when $flicker is set to TRUE.
\par Default value: TRUE
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $fmtlead variable}}{\fs16  }{\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _fmtlead}} {\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:fmtlead}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $fmtlead;paragraph}} $fmtlead
\par \pard\plain \s6\sa120 \f4\fs20 A line starting with one of the characters in the $fmtlead {\uldb variable}{\v Variables} is considered to be a text formatter command. Therefore, the following line is considered to be the start of a {\uldb paragraph}{\v 
Paragraphs}. 
\par If you are editing text destined for use by a text formatter, set $fmtlead to the command ch
aracter for that formatter. That will prevent MicroEMACS from formatting what should be lines of commands meant for the formatter. If, for example, you are editing SCRIBE source, use the {\uldb set}{\v set} ({\ul ^XA}{\v Keystroke}
) command to set $fmtlead to "{\b @}".
\par Default value: empty string
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $gflags variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _gflags}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:gflags}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $gflags}} $gflags
\par \pard\plain \s6\sa120 \f4\fs20 Some of the ways MicroEMACS controls its internal functions can be modified by the value in the $gflags {\uldb variable}{\v Variables}. Each bit in this variable will be used to control a different function:
\par \pard\plain \s7\fi-1080\li1440\sa120\tx1440\tx2880 \f4\fs20 1\tab If this bit is set to zero, EMACS will not automatically switch to the buffer of the first file after executing the startup macros.
\par 2\tab If this bit is set to one, suppress redraw events.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $hardtab variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _hardtab}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:hardtab}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $hardtab}} $hardtab
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the number of spaces between hard tab stops. This can be used to change the way tabs are displayed within the editor.
\par Default value: 8
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\plain \f4\fs16\up6 \page ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $hilight variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _hilight}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:hilight}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $hilight}} $hilight
\par \pard\plain \s6\sa120 \f4\fs20 When this {\uldb variable}{\v Variables} contains a value {\i n} between 0 and 14, it indicates that the text located between the {\ul marks}{\v mark} {\i n} and {\i n}
+1 should be highlighted. A value of 255 indicates that no highlighting is performed.
\par Default value: 10
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $hjump variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _hjump}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:hjump}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $hjump}} $hjump
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the number of columns the editor should scroll the screen horizontally when a horizontal scroll is required.
\par Default value: 1
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $hscroll variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _hscroll}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:hscroll}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $hscroll}} $hscroll
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables}
 is a flag that determines if MicroEMACS will scroll the entire window horizontally, or just the current line. The default value, TRUE, results in the entire window being shifted left or right when the cursor goes off the edge of the screen.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $hscrlbar variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _hscrlbar}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:hscrlbar}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $hscrlbar;scroll bar}} $hscrlbar
\par \pard\plain \s6\sa120 \f4\fs20 This boolean {\uldb variable}{\v Variables} exists only under the MS-Windows version of MicroEMACS. If it is TRUE, an horizontal scroll bar is available at the bottom of each {\ul screen}{\v Screen}
, allowing you to scroll the text in the current {\ul window}{\v Window} right and left.
\par If $hscrlbar is FALSE, the horizontal scroll bar is not present.
\par Default value: TRUE
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $isterm variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _isterm}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:isterm}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $isterm;incremental search}} $isterm
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the character used to terminate incremental search string inputs.
\par Default value: the last key bound to {\uldb meta-prefix}{\v meta_prefix} (initially: Escape character)
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $kill variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _kill}} {\plain \f4\fs16\up6 +{\footnote 
\pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:kill}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $kill}} $kill
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the first 127 characters currently in the {\ul kill buffer}{\v KillBuffer}.
\par Attempts to set this variable are ignored.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $language variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _language}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:language}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $language}} $language
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables}
 contains the name of the national language in which MicroEMACS messages will be displayed. (Currently MicroEMACS is available in English, French, Spanish, Latin, Portuguese, Dutch, German, and Pig Latin).
\par The MS-Windows version of MicroEMACS is currently available in English only.
\par Attempts to set this variable are ignored. Changing the language used by MicroEMACS requires recompiling.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $lastkey variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _lastkey}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:lastkey}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $lastkey}} $lastkey
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains a number representing the ASCII value of the last key press processed by MicroEMACS. This variable does not contain any indication that the last keystroke was prefixed by the {
\ul Meta}{\v MetaKey} or the {\b Alt} keys. Further more, function or special keys are perceived as the last character of their {\ul keystroke representation}{\v Keystroke}.
\par Note that this variable does not change during playback of a {\ul keyboard macro}{\v KeyboardMacro}.
\par Setting this variable does not have any effect on the editor beyond changing the variable's value.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $lastmesg variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _lastmesg}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:lastmesg}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $lastmesg}} $lastmesg
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the text of the last message which MicroEMACS wrote on the {\ul message line}{\v MessageLine}.
\par Setting this variable does not have any effect on the editor beyond changing the variable's value.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $line variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _line}} {\plain \f4\fs16\up6 +{\footnote 
\pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:line}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $line}} $line
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the first 127 characters of the current line. Setting this variable overwrites the contents of the current line.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $lterm variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _lterm}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:lterm}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $lterm}} $lterm
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables}
 contains the string of characters to use as a line terminator when writing a file to disk. By default, it is an empty string, which causes a newline to be written (under MS-DOS or MS-Windows, this translates into a carriage return character followed by a
 line feed character).
\par Under some operating systems, the value of this variable is irrelevant.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $lwidth variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _lwidth}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:lwidth}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $lwidth}} $lwidth
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the number of characters of the current line.
\par Attempts to set this variable are ignored.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $match variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _match}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:match}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $match}} $match
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the last string matched by a {\uldb search}{\v SearchingAndReplacing} operation.
\par Attempts to set this variable are ignored.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\plain \f4\fs16\up6 \page ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $mmove variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _mmove}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:mmove}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $mmove;mouse}} $mmove
\par \pard\plain \s6\sa120 \f4\fs20 If this {\uldb variable}{\v Variables} it is equal to 2, any mouse movement results in a mouse action ({\ul MSm}{\v MouseAction}, {\ul S-MSm}{\v MouseAction} or {\ul MS^m}{\v MouseAction}).
\par If this variable is set to 1, some mouse movement that are of marginal interest (like while a {\ul popup buffer}{\v PopupBuffer} is being displayed or, under MS-Windows, while no mouse button is pressed) are ignored.
\par If $mmove is set to 0, all mouse movements are ignored.
\par Default value: 1
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $modeflag variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _modeflag}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:modeflag}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $modeflag}} $modeflag
\par \pard\plain \s6\sa120 \f4\fs20 If this boolean {\uldb variable}{\v Variables} is TRUE, {\ul mode lines}{\v ModeLine} are visible. If it is FALSE, mode lines are not displayed (thus allowing one more line per {\ul window}{\v Window}).
\par Default value: TRUE
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $msflag variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _msflag}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:msflag}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $msflag;mouse}} $msflag
\par \pard\plain \s6\sa120 \f4\fs20 Under some operating systems, this boolean {\uldb variable}{\v Variables}
 can be used to control the use of the pointing device: when it is TRUE, the mouse (if present) is active. When it is FALSE, the mouse cursor is not displayed, and mouse actions are ignored.
\par Under MS-Windows, setting this variable to FALSE does not cause the cursor to be hidden, but mouse actions within text areas are ignored. However, the mouse remains useable to activate menus or select, move and resize {\ul screens}{\v Screen}.
\par Default value: TRUE
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $numwind variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _numwind}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:numwind}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $numwind}} $numwind
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the number of {\ul windows}{\v Window} displayed within the current {\ul screen}{\v Screen}.
\par Attempts to set this variable are ignored.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $oldcrypt variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _oldcrypt}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:oldcrypt}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $oldcrypt}} $oldcrypt
\par \pard\plain \s6\sa120 \f4\fs20 If this boolean {\uldb variable}{\v Variables} is TRUE, the {\uldb CRYPT}{\v CRYPT}
 mode uses the old method of encryption (which had a bug in it). This allows you to read files that were encrypted with a previous version of MicroEMACS.
\par Default value: FALSE.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $orgrow variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _orgrow}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:orgrow}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $orgrow}} $orgrow
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the position of the current {\ul screen}{\v Screen}'s top row on the desktop, starting at 0.
\par Setting this variable is equivalent to invoking the {\uldb change-screen-row}{\v change_screen_row} command.
\par Under MS-Windows, the value of this variable is irrelevant.
\par Default value: 0
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $os variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _os}} {\plain \f4\fs16\up6 +{\footnote 
\pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:os}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $os}} $os
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains a string that identifies the operating system. It is set to MSWIN in the Microsoft Windows version of MicroEMACS.
\par Attempts to set this variable are ignored.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $orgcol variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _orgcol}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:orgcol}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $orgcol}} $orgcol
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the position of the current {\ul screen}{\v Screen}'s left column on the desktop, starting at 0.
\par Setting this variable is equivalent to invoking the {\uldb change-screen-column}{\v change_screen_column} command.
\par Under MS-Windows, the value of this variable is irrelevant.
\par Default value: 0
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\plain \f4\fs16\up6 \page ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $overlap variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _overlap}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:overlap}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $overlap}} $overlap
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the amount of overlapping, in number of lines, used when paging up and down (using the {\uldb next-page}{\v next_page} and {\uldb previous-page}{\v previous_page} commands).

\par Default value: 2
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $pagelen variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _pagelen}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:pagelen}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $pagelen}} $pagelen
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the number of lines (including {\ul mode lines}{\v ModeLine}) displayed by the current {\ul screen}{\v Screen}.
\par Setting this variable is equivalent to invoking the {\uldb change-screen-size}{\v change_screen_size} command with a {\ul numeric argument}{\v Argument}.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $palette variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _palette}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:palette}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $palette}} $palette
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains a string that is used to control the {\uldb color}{\v Colors} palette settings on graphics versions of MicroEMACS.
\par Under MS-Windows, $palette is composed of up to 48 octal digits. Each group of three digits redefines an entry of the palette, by specifying the red, green and blue levels of that color.
\par Default value: empty string
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $paralead variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _paralead}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:paralead}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $paralead;paragraph}} $paralead
\par \pard\plain \s6\sa120 \f4\fs20 A line starting with one of the characters in the $paralead {\uldb variable}{\v Variables} is considered to be the first line of a  {\uldb paragraph}{\v Paragraphs}.
\par Default value: Space and TAB characters
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $pending variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _pending}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:pending}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $pending}} $pending
\par \pard\plain \s6\sa120 \f4\fs20 This boolean {\uldb variable}{\v Variables} is TRUE if there are type ahead keystrokes waiting to be processed.
\par Attempts to set this variable are ignored.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $popflag variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _popflag}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:popflag}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $popflag}} $popflag
\par \pard\plain \s6\sa120 \f4\fs20 If this boolean {\uldb variable}{\v Variables} is TRUE, {\ul popup buffers}{\v PopupBuffer} are used instead of opening a {\ul window}{\v Window} for building completion lists and by the following commands:
\par \pard\plain \s2\fi-2520\li2880\tx2880 \f4\fs20 {\uldb apropos}{\v apropos}
\par {\uldb describe-bindings}{\v describe_bindings}
\par {\uldb describe-functions}{\v describe_functions}
\par {\uldb describe-variables}{\v describe_variables}
\par {\uldb list-buffers}{\v list_buffers}
\par {\uldb list-screens}{\v list_screens}
\par {\uldb list-undos}{\v list_undos}
\par \pard \s2\fi-2520\li2880\sa120\tx2880 {\uldb show-files}{\v show_files}
\par \pard\plain \s6\sa120 \f4\fs20 Default value: TRUE
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $posflag variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _posflag}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:posflag}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $posflag}} $posflag
\par \pard\plain \s6\sa120 \f4\fs20 If this boolean {\uldb variable}{\v Variables} is TRUE, the position of the {\ul point}{\v Point} (row and column) is displayed in the current {\ul window}{\v Window}'s {\ul mode line}{\v ModeLine}.
\par Default value: FALSE
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $progname variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _progname}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:progname}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $progname}} $progname
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the string "{\f9 MicroEMACS}" for standard MicroEMACS. It can be something else if MicroEMACS is incorporated as part of someone else's program.
\par Attempts to set this variable are ignored. Changing it requires recompiling.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $readhook variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _readhook}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:readhook}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $readhook;hook;read}} $readhook
\par \pard\plain \s6\sa120 \f4\fs20 The {\ul command}{\v Command} or {\ul macro}{\v Macro} named in this {\uldb variable}{\v Variables} is run when a file is read into a {\ul buffer}{\v Buffer}. This can be used to implement {\uldb modes}{\v ModesOfOperation}
 which are specific to a particular file or file type.
\par Default value: {\uldb nop}{\v nop}
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $region variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _region}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:region}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $region}} $region
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the first 255 characters of the current {\ul region}{\v Region}. If the region is not defined (because the {\ul mark}{\v Mark} is not set), this variable contains the string: "{
\f9 ERROR}".
\par Attempts to set this variable are ignored.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $replace variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _replace}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:replace}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $replace;replace}} $replace
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the current default replace string. That is the replace string that was specified in the last {\uldb replace-string}{\v replace_string} or {\uldb query-replace-string}{\v 
query_replace_string} command and will be used as default value for the next such command.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $rval variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _rval}} {\plain \f4\fs16\up6 +{\footnote 
\pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:rval}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $rval}} $rval
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the returned value from the last subprocess which was invoked from MicroEMACS's commands: {\uldb execute-program}{\v execute_program}, {\uldb filter-buffer}{\v filter_buffer}, {
\uldb i-shell}{\v i_shell}, {\uldb pipe-command}{\v pipe_command}.and {\uldb shell-command}{\v shell_command}.
\par Under MS-Windows, this variable always has the value 0.
\par Attempts to set this variable are ignored.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $scrname variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _scrname}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:scrname}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $scrname}} $scrname
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the current {\ul screen}{\v Screen}'s name.
\par Setting this variable causes the specified screen to be made the current one. If that screen does not exist, nothing happens. To change the name of a screen, use the {\uldb rename-screen}{\v rename_screen} command.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $search variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _search}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:search}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $search;search;replace}} $search
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the current default search string. That is the search string that was specified in the last {\uldb search-forward}{\v search_forward}, {\uldb search-reverse}{\v search_reverse}, {
\uldb incremental-search}{\v incremental_search}, {\uldb reverse-incremental-search}{\v reverse_incremental_search}, {\uldb replace-string}{\v replace_string} or {\uldb query-replace-string}{\v query_replace_string}
 command and will be used as default value for the next such command or as the target for {\uldb hunt-forward}{\v hunt_forward} and {\uldb hunt-backward}{\v hunt_backward}.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $searchpnt variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _searchpnt}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:searchpnt}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $searchpnt}} $searchpnt
\par \pard\plain \s6\sa120 \f4\fs20 The value of this {\uldb variable}{\v Variables} specifies the positioning of the of the {\ul point}{\v Point} at the end of a successful search:
\par \pard\plain \s8\fi-360\li360\sa120\tx360\tx1440\tx2880\tx3600\tx4320 \f4\fs20 -\tab If $searchpnt = 0, the cursor is placed at the end of the matched text on forward searches, and at the beginning of this text on reverse searches.
\par -\tab If $searchpnt = 1, the cursor is placed at the beginning of the matched text regardless of the search direction.
\par -\tab If $searchpnt = 2, the cursor is placed at the end of the matched text regardless of the search direction.
\par \pard\plain \s6\sa120 \f4\fs20 Setting this variable to a value other than one of the above causes the value 0 to be used.
\par Default value: 0
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $seed variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _seed}} {\plain \f4\fs16\up6 +{\footnote 
\pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:seed}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $seed}} $seed
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the integer seed of the random number generator. This is used by the {\uldb &rnd}{\v .rnd} function and also to compute temporary file names (if {\uldb $ssave}{\v _ssave}
 is TRUE).
\par Initial value: 0
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $softtab variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _softtab}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:softtab}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $softtab}} $softtab
\par \pard\plain \s6\sa120 \f4\fs20 The value of this {\uldb variable}{\v Variables} relates to the number of spaces inserted by MicroEMACS when the {\uldb handle-tab}{\v handle_tab} command (which is normally bound to the TAB key) is invoked:
\par \pard\plain \s8\fi-360\li360\sa120\tx360\tx1440\tx2880\tx3600\tx4320 \f4\fs20 \tab If $softtab is {\i n}, strictly positive, tabs stops are located at every {\i n}{\fs16\up6 th} column and the handle-tab command inserts {\ul space characters}{\b  }
in sufficient number to move the {\ul point}{\v Point} to the next tab stop.
\par \tab If $softtab is zero, the handle-tab command inserts {\ul true tab characters}.{\b  }
\par \tab If $softtab is strictly negative, the handle-tab command fails.
\par \pard\plain \s6\sa120 \f4\fs20 This variable can be set by passing a {\ul numeric argument}{\v Argument} to handle-tab or by directly using the {\uldb set}{\v set} command.
\par Default value: 0
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $sres variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _sres}} {\plain \f4\fs16\up6 +{\footnote 
\pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:sres}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $sres}} $sres
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables}
 contains a string that identifies the current screen resolution (CGA, MONO, EGA or VGA on the IBM-PC, LOW, MEDIUM, HIGH or DENSE on the Atari ST1040, MSWIN under Microsoft Windows and NORMAL on most others).
\par Depending on the hardware and operating system MicroEMACS is running on, setting this variable may allow you to change the screen resolution. Not that under MS-Windows, attempts to set this variable are ignored.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $ssave variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _ssave}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:ssave}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $ssave}} $ssave
\par \pard\plain \s6\sa120 \f4\fs20 If this boolean {\uldb variable}{\v Variables}
 is TRUE, MicroEMACS perform "safe saves": when it is asked to save the current buffer to disk, it writes it out to a temporary file, deletes the original file, and then renames the temporary to the old file name.
\par If $ssave is FALSE, MicroEMACS performs saves by directly overwriting the original file, thus risking loss of data if a system crash occurs before the end of the save operation. On the other hand, this mode insures that the original file attributes (owner
ship and access rights) are preserved on systems that support these (like UNIX).
\par Default value: TRUE.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $sscroll variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _sscroll}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:sscroll}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $sscroll}} $sscroll
\par \pard\plain \s6\sa120 \f4\fs20 If this boolean {\uldb variable}{\v Variables} is TRUE, MicroEMACS is configured for smooth vertical scrolling: when the cursor moves off the top or bottom of the current {\ul window}{\v Window}
, the window's contents scroll up or down one line at a time.
\par If $sscroll is FALSE, scrolling occurs by half pages.
\par Default value: FALSE
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $status variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _status}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:status}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $status}} $status
\par \pard\plain \s6\sa120 \f4\fs20 This boolean {\uldb variable}{\v Variables} contains the status returned by the last command. This is usually used with the {\uldb !FORCE}{\v .FORCE} directive to check on the success of a search, or a file operation.
\par Setting this variable can be used to return a FALSE status from a {\ul macro}{\v Macro}.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $sterm variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _sterm}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:sterm}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $sterm;replace;search}} $sterm
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the character used to terminate search string inputs.
\par Default value: the last key bound to {\uldb meta-prefix}{\v meta_prefix} (initially: Escape character)
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $target variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _target}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:target}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $target}} $target
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the column position where the {\ul point}{\v Point} will attempt to move after a {\uldb next-line}{\v next_line} or {\uldb previous-line}{\v previous_line}
 command. Unless the previous command was next-line or previous-line, the default value for this variable is the current column.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $time variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _time}} {\plain \f4\fs16\up6 +{\footnote 
\pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:time}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $time}} $time
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains a string corresponding to the current date and time. Usually this is given in a form like to "Mon May 09 10:10:58 1988". Not all operating systems support this.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $timeflag variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _timeflag}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:timeflag}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $timeflag}} $timeflag
\par \pard\plain \s6\sa120 \f4\fs20 If this boolean {\uldb variable}{\v Variables} is TRUE, the current time is displayed on the bottom {\ul mode line}{\v ModeLine} of each {\ul screen}{\v Screen}.
\par Default value: FALSE.
\par Note: Under MS-Windows, this feature currently does not operate properly because MicroEMACS makes incorrect assumptions about the format of the time string (see {\uldb $time}{\v _time}).
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $tpause variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _tpause}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:tpause}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $tpause}} $tpause
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the length of the pause used to show a matched fence when the current buffer is in CMODE and a closing fence ( a character among "{\b )\}]}") has been typed.
\par On most systems, this pause is performed by a CPU loop and therefore, the value of $tpause may need to be adjusted to compensate for the processor's speed.
\par Under MS-Windows, the pause is performed by a bona-fide timer and $tpause is expressed in milliseconds. The default value is 1000.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $undoflag variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _undoflag}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:undo}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $undoflag}} $undoflag
\par \pard\plain \s6\sa120 \f4\fs20 If this boolean {\uldb variable}{\v Variables} is set to TRUE, MicroEMACS saves information on all editing operations so it can undo it in conjunction with the {\uldb undo}{\v undo}
 command. When FALSE, this information is not stored, taking up less memory and running slightly faster.
\par Default value: TRUE.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $version variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _version}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:version}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $version}} $version
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the current MicroEMACS version number (i.e. "{\f9 3.11c}").
\par Attempts to set this variable are ignored.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $vscrlbar variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _vscrlbar}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:vscrlbar}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $vscrlbar;scroll bar}} $vscrlbar
\par \pard\plain \s6\sa120 \f4\fs20 This boolean {\uldb variable}{\v Variables} exists only under the MS-Windows version of MicroEMACS. If it is TRUE, a vertical scroll bar is available at the right end of each {\ul screen}{\v Screen}
, allowing you to scroll the text in the current {\ul window}{\v Window} up and down.
\par If $vscrlbar is FALSE, the vertical scroll bar is not present.
\par Default value: TRUE
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $wchars variable}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 _wchars}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:wchars}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $wchars;word}} $wchars
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} is used to define what a {\uldb word}{\v Words} is for MicroEMACS. It contains the list of all the characters that can be considered part of a word.
\par If $wchar is empty, a word is defined as composed of upper and lower case letters, numerals (0 to 9) and the underscore character.
\par Default value: empty
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $wline variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _wline}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:wline}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $wline}} $wline
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the number of lines displayed in the current {\ul window}{\v Window}, excluding the {\ul mode line}{\v ModeLine}.
\par Setting this variable is equivalent to using the {\uldb resize-window}{\v resize_window} command with a {\ul numeric argument}{\v Argument}.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $wraphook variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _wraphook}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:wraphook}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $wraphook;hook;wrap}} $wraphook
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the name of a {\ul command}{\v Command} or {\ul macro}{\v Macro} which is executed when a {\ul buffer}{\v Buffer} is in {\uldb WRAP}{\v WRAP}
 mode and it is time to wrap the current line.
\par Default value: {\uldb wrap-word}{\v wrap_word}
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $writehook variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _writehook}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:writehook}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $writehook;hook;write}} $writehook
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the name of a {\ul command}{\v Command} or {\ul macro}{\v Macro}
 which is invoked whenever MicroEMACS attempts to write a file out to disk. This is executed before the file is written, allowing you to process a file on the way out.
\par Default value: {\uldb nop}{\v nop}
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $xpos variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _xpos}} {\plain \f4\fs16\up6 +{\footnote 
\pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:xpos}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $xpos;mouse}} $xpos
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the horizontal {\ul screen}{\v Screen} coordinate where the mouse was located the last time a {\uldb mouse button}{\v MouseCommands} was pressed or released.
\par The leftmost column is considered to be 0 in screen coordinates.
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $yankflag variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _yankflag}} {\plain \f4\fs16\up6 +
{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:yankflag}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $yankflag}} $yankflag
\par \pard\plain \s6\sa120 \f4\fs20 This boolean {\uldb variable}{\v Variables} controls the placement of the {\ul point}{\v Point} after a {\uldb yank}{\v yank}, {\uldb yank-pop}{\v yank_pop}, {\uldb insert-file}{\v insert_file} or {\uldb insert-clip}{\v 
insert_clip} command.
\par If $yankflag is FALSE, the point is moved to the end of the yanked or inserted text.
\par If $yankflag is TRUE, the cursor remains at the start of the yanked or inserted text.
\par Default value: FALSE
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} $ypos variable}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} _ypos}} {\plain \f4\fs16\up6 +{\footnote 
\pard\plain \s245 \f4\fs20 {\fs16\up6 +} EVariables:ypos}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} $ypos;mouse}} $ypos
\par \pard\plain \s6\sa120 \f4\fs20 This {\uldb variable}{\v Variables} contains the vertical {\ul screen}{\v Screen} coordinate where the mouse was located the last time a {\uldb mouse button}{\v MouseCommands} was pressed or released.
\par The top row is considered to be 0 in screen coordinates.
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Interactive Variables}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 InteractiveVariables}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Variables:interactivevariables}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} interactive;variable}} Interactive Variables

\par \pard\plain \s6\sa120 \f4\fs20 Interactive {\uldb variables}{\v Variables} are actually a method to prompt the user for a string. This is done by using an at sign "@" followed with a string {\uldb argument}{\v Arguments}. The string is displayed on the {
\ul message line}{\v MessageLine}, and the editor waits for the user to type in a string which is then returned as the value of the interactive variable. For example:
\par \pard\plain \s4\fi-2160\li2880\sa120\tx2880 \f27\fs18 find-file {\b @}"What file? "
\par \pard\plain \s6\sa120 \f4\fs20 will ask the user for a file name, and then attempt to find it. Note also that complex expressions can be built up with these operators, such as: 
\par \pard\plain \s4\fi-2160\li2880\tx2880 \f27\fs18 set %default "file1"
\par \pard \s4\fi-2160\li2880\sa120\tx2880 {\b @}&cat &cat "File to decode[" %default "]: "
\par \pard\plain \s6\sa120 \f4\fs20 which prompts the user with the string:
\par \pard\plain \s4\fi-2160\li2880\sa120\tx2880 \f27\fs18 File to decode[file1]:
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} User Variables}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 UserVariables}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Variables:uservariables}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} variable}} User Variables
\par \pard\plain \s6\sa120 \f4\fs20 User {\uldb variables}{\v Variables}
 allow you to store strings and manipulate them. These strings can be pieces of text, numbers (in text form), or the logical values TRUE and FALSE. These variables can be combined, tested, inserted into buffers, and otherwise used to control the way your 
{\uldb macros}{\v MacroLanguage} execute. Up to 512 user variables may be in use in one editing session. All user variable names must begin with a percent sign "{\b %}
" and may contain any printing character. Only the first 10 characters are significant (i.e. differences beyond the tenth character are ignored).
\par When a user variable has not been set, it has the value: "ERROR".
\par \pard\plain \s253\sa240\tx2880 \b\f4\cf2 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Functions}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} Functions}} 
{\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} MacroLanguage:060}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} function}} Functions
\par \pard\plain \s6\sa120 \f4\fs20 Functions are part of the MicroEMACS {\uldb Macro language}{\v MacroLanguage}. They can be used wherever an {\uldb argument}{\v Arguments} (number, string or boolean) is needed.
\par Function names always begin with the ampersand "&" character, and only the first three characters after the ampersand are significant. Functions are always used in lower case.
\par Functions can be used to act on variables in various ways. Functions can have one, two, or three arguments. These are always placed after the function, and they can include functions (with their own arguments).
\par {\b By topic}:
\par \pard\plain \s11\li360\tx2880 \f4\fs20 {\uldb Boolean functions}{\v BooleanFunctions}
\par {\uldb Numeric functions}{\v NumericFunctions}
\par {\uldb String functions}{\v StringFunctions}
\par \pard \s11\li360\sa120\tx2880 {\uldb Miscellaneous functions}{\v MiscellaneousFunctions}
\par \pard\plain \s6\sa120 \f4\fs20 {\b By returned value}:
\par \pard\plain \s2\fi-2520\li2880\sa120\tx2880 \f4\fs20 Boolean:\tab {\uldb &and}{\v .and}, {\uldb &equal}{\v .equal}, {\uldb &exist}{\v .exist}, {\uldb &greater}{\v .greater}, {\uldb &isnum}{\v .isnum}, {\uldb &less}{\v .less}, {\uldb &not}{\v .not}, {
\uldb &or}{\v .or}, {\uldb &sequal}{\v .sequal}, {\uldb &sgreater}{\v .sgreater} and {\uldb &sless}{\v .sless}
\par Numeric:\tab {\uldb &abs}{\v .abs}, {\uldb &add}{\v .add}, {\uldb &ascii}{\v .ascii}, {\uldb &band}{\v .band}, {\uldb &bnot}{\v .bnot}, {\uldb &bor}{\v .bor}, {\uldb &bxor}{\v .bxor}, {\uldb &divide}{\v .divide}, {\uldb &length}{\v .length}, {\uldb &mod}{
\v .mod}, {\uldb &negate}{\v .negate}, {\uldb &rnd}{\v .rnd}, {\uldb &sindex}{\v .sindex}, {\uldb &sub}{\v .sub} and {\uldb &times}{\v .times}
\par String:\tab {\uldb &bind}{\v .bind}, {\uldb &cat}{\v .cat}, {\uldb &chr}{\v .chr}, {\uldb &env}{\v .env}, {\uldb &find}{\v .find}, {\uldb &group}{\v .group}, {\uldb &gtc}{\v .gtc}, {\uldb &gtk}{\v .gtk}, {\uldb &indirect}{\v .indirect}, {\uldb &left}{\v 
.left}, {\uldb &lower}{\v .lower}, {\uldb &mid}{\v .mid}, {\uldb &rev}{\v .rev}, {\uldb &right}{\v .right}, {\uldb &slower}{\v .slower}, {\uldb &supper}{\v .supper}, {\uldb &trim}{\v .trim}, {\uldb &upper}{\v .upper} and {\uldb &xlate}{\v .xlate}
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Boolean Functions}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 BooleanFunctions}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Functions:booleanfunctions}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} function;&and;&not;&or}} Boolean Functions
\par \pard\plain \s6\sa120 \f4\fs20 These {\uldb functions}{\v Functions} perform operations on boolean {\uldb arguments}{\v Arguments}:
\par \pard\plain \s13\fi-2880\li2880\sa120\tx900\tx2880 \f4\fs20 {\b &and}\tab {\i log1   log2}\tab Returns TRUE if both boolean arguments are TRUE
\par {\b &not}\tab {\i log}\tab Returns the opposite boolean value
\par {\b &or}\tab {\i log1   log2}\tab Returns TRUE if either argument is TRUE
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Numeric Functions}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 NumericFunctions}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Functions:numericfunctions}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K}
 function;&abs;&add;&band;&bnot;&bor;&bxor;&chr;&divide;&equal;&greater;&isnum;&less;&mod;&negate;&sub;&times}} Numeric Functions
\par \pard\plain \s6\sa120 \f4\fs20 These {\uldb functions}{\v Functions} perform operations on numerical {\uldb arguments}{\v Arguments}:
\par \pard\plain \s13\fi-2880\li2880\sa120\tx900\tx2880 \f4\fs20 {\b &abs}\tab {\i num}\tab Returns the absolute value of {\i num}
\par {\b &add}\tab {\i num1   num2}\tab Adds two numbers
\par {\b &band}\tab {\i num1   num2}\tab Bitwise AND function
\par {\b &bnot}\tab {\i num}\tab Bitwise NOT function
\par {\b &bor}\tab {\i num1   num2}\tab Bitwise OR function
\par {\b &bxor}\tab {\i num1   num2}\tab Bitwise XOR function
\par {\b &chr}\tab {\i num}\tab Returns a string with the character represented by ASCII code {\i num}. This function is the opposite of {\uldb &ascii}{\v .ascii}
\par {\b &divide}\tab {\i num1   num2}\tab Divides {\i num1} by {\i num2},giving an integer result
\par {\b &equal}\tab {\i num1   num2}\tab Returns TRUE if {\i num1} and {\i num2} are numerically equal
\par {\b &greater}\tab {\i num1   num2}\tab Returns TRUE if {\i num1} is greater than, or equal to {\i num2}
\par {\b &isnum}\tab {\i num}\tab Returns TRUE if the given argument is a legitimate number
\par {\b &less}\tab {\i num1   num2}\tab Returns TRUE if {\i num1} is less than {\i num2}
\par {\b &mod}\tab {\i num1   num2}\tab Returns the reminder of dividing {\i num1} by {\i num2}
\par {\b &negate}\tab {\i num}\tab Multiplies {\i num} by -1
\par {\b &rnd}\tab {\i num}\tab Returns a random integer between 1 and {\i num}
\par {\b &sub}\tab {\i num1   num2}\tab Subtracts {\i num2} from {\i num1}
\par {\b &times}\tab {\i num1   num2}\tab Multiplies {\i num1} by {\i num2}
\par \pard\plain \s252\sa120\tx2880 \b\f4 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} String Functions}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 StringFunctions}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Functions:stringfunctions}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K}
 function;&ascii;&cat;&left;&length;&lower;&mid;&right;&sequal;&sgreater;&sindex;&sless;&slower;&supper;&trim;&upper;&xlate}} String Functions
\par \pard\plain \s6\sa120 \f4\fs20 These {\uldb functions}{\v Functions} perform operations related to strings. All of them have at least one string {\uldb argument}{\v Arguments}:
\par \pard\plain \s13\fi-2880\li2880\sa120\tx900\tx2880 \f4\fs20 {\b &ascii}\tab {\i str}\tab Returns the ASCII code of the first character in {\i str}. This function is the opposite of {\uldb &chr}{\v .chr}
\par {\b &cat}\tab {\i str1   str2}\tab Concatenates the two strings to form one
\par {\uldb &indirect}{\v .indirect}\tab {\i str}\tab Evaluate {\i str} as a variable.
\par {\b &left}\tab {\i str    num}\tab Returns the {\i num} leftmost characters from {\i str}
\par {\b &length}\tab {\i str}\tab Returns length of string
\par {\b &lower}\tab {\i str}\tab Transforms {\i str} to lowercase
\par {\b &mid}\tab {\i str   num1   num2}\tab Starting from {\i num1} position in {\i str}, returns {\i num2} characters
\par {\b &rev}\tab {\i str}\tab Reverses the order of characters in {\i str}
\par {\b &right}\tab {\i str   num}\tab Returns the {\i num} rightmost characters from {\i str}
\par {\b &sequal} \tab {\i str1   str2}\tab Returns TRUE if the two strings are the same
\par {\b &sgreater}\tab {\i str1   str2}\tab Returns TRUE if {\i str1} is alphabetically greater than or equal to {\i str2}
\par {\b &sindex}\tab {\i str1   str2}\tab Returns the position of {\i str2} within {\i str1}. Returns zero if not found
\par {\b &sless}\tab {\i str1   str2}\tab Returns TRUE if {\i str1} is less alphabetically than {\i str2}
\par {\b &slower}\tab {\i str1   str2}\tab Translate the first char in {\i str1} to the first char in {\i str2} when lowercasing.
\par {\b &supper}\tab {\i str1   str2}\tab Translate the first char in {\i str1} to the first char in {\i str2} when uppercasing.
\par {\b &trim}\tab {\i str}\tab Trims the trailing white space from a string{\f10 
\par }{\b &upper}\tab {\i str}\tab Transforms {\i str} to uppercase
\par {\b &xlate}\tab {\i source   lookup   trans}Translate each character of {\i source} that appears in {\i lookup} to the corresponding character from {\i trans}
\par \pard\plain \s252\sa120\tx2880 \b\f4 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Miscellaneous Functions}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} MiscellaneousFunctions}} {\plain 
\f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} Functions:zzzmiscellaneousfunctions}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} function;&bind;&env;&exist;&find;&group;&gtc;&gtk}} Miscellaneous Functions

\par \pard\plain \s13\fi-2880\li2880\sa120\tx900\tx2880 \f4\fs20 {\b &bind}\tab {\i str}\tab Returns the name of the command bound to the keystroke {\i str}
\par {\b &env}\tab {\i str}\tab If the operating system has this capability, this returns the environment string associated with {\i str}
\par {\b &exist}\tab {\i str}\tab Returns TRUE if the named file {\i str} exists
\par {\b &find}\tab {\i str}\tab Finds the named file {\i str} along the {\ul path}{\v Path} and return its full file specification or an empty string if no such file exists
\par {\b &group}\tab {\i num}\tab Return {\ul group}{\v Group} {\i num} as set by a {\uldb MAGIC}{\v MAGIC} mode search.
\par {\b &gtc}\tab \tab Returns a string of characters containing a MicroEMACS command input from the user
\par {\b &gtk}\tab \tab Returns a string containing a single keystroke from the user
\par \pard\plain \s251\sa120\tx2880 \b\f4\fs20 {\plain \f4\fs16 \page }{\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} &indirect function}}{\plain \f4\fs16  }{\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #}
 .indirect}} {\plain \f4\fs16\up6 +{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 +} StringFunctions:indirect}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} &indirect;function}} &indirect
\par \pard\plain \s6\sa120 \f4\fs20 The &indirect {\uldb function}{\v Functions} evaluates its {\uldb argument}{\v Arguments}, takes the resulting string, and then uses it as a {\uldb variable}{\v Variables} name. For example, given the following piece of {
\uldb macro language}{\v MacroLanguage}:
\par \pard\plain \s4\fi-2160\li2880\tx2880 \f27\fs18 ; set up reference table
\par set %one "elephant"
\par set %two "giraffe"
\par set %three "donkey"
\par set %index "%two"
\par \pard \s4\fi-2160\li2880\sa120\tx2880 insert-string {\b &ind} %index
\par \pard\plain \s6\sa120 \f4\fs20 The string "giraffe" would have been inserted at the point in the current buffer. This indirection can be safely nested up to about 10 levels.
\par \pard\plain \s253\sa240\tx2880 \b\f4\cf2 \page {\plain \f4\fs16\up6 ${\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 $} Comments}} {\plain \f4\fs16\up6 #{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 #} Comments}} {\plain \f4\fs16\up6 +{\footnote 
\pard\plain \s245 \f4\fs20 {\fs16\up6 +} MacroLanguage:070}} {\plain \f4\fs16\up6 K{\footnote \pard\plain \s245 \f4\fs20 {\fs16\up6 K} comment}} Comments
\par \pard\plain \s6\sa120 \f4\fs20 Within the {\uldb macro language}{\v MacroLanguage}, a semicolon "{\b ;}" signals the beginning of a comment. The text from the semicolon to the end of the line is ignored by MicroEMACS.
\par A comment can be the only content of a line, in which case the semicolon must be the first non-blank character on the line. A comment can also appear at the end of any statement.
\par Note that empty lines are legal (treated as comments).
\par }
